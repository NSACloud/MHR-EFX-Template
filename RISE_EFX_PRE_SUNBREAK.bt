//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: 
//   Authors: NSA Cloud
//   Version: V6
//   Purpose: Monster Hunter Rise EFX
//  Category: 
// File Mask: *.efx.2621987
//  ID Bytes: 
//   History: 
/*
	
	V6 7/1/2022
	-----
	Reworked template structure to allow for iteration over attributes.
	Moved field parameters to be parsed after actions
	Changed unkn8 in header to unknFlag
	-----
	V5 6/25/2022
	-----
	Added full sunbreak update support. New structs added. All efx files in sunbreak should work upon release.
	Added path entry to field parameters
	Droppped support for pre sunbreak update efx. Use the pre sunbreak efx template for pre sunbreak efx.
	-----
	V4 5/29/2022
	-----
	Template now works on all efx files in the game (As of pre Sunbreak expansion)
	Added used values for all variables as comments on the template to make mapping their function easier
	Automated data type mapping for unknown variables
	Changed item type to an enum to make porting the template between games easier
	Changed "Parent Options relation" to "Bone Attribute relation", any efx attributes that use bones have a bone attribute relation entry
	Changed unknParameter to expressionParameter
	Moved field parameter values into subheader
	Template forces endian mode to little endian to prevent issues
	-----

	V3 2/11/2022
	-----
	Changed unknEFXValue in subheader to efxParentOptionsRelation
		- Now displays efx entry that the relation entry is associated with
	Changed unkn1 in ParentOptions to isUsingBone
	-----

	V2 4/24/2021
	-----
	Fixed missing float on TypeRibbonFollow. 
	Labeled unknowns for Life, UVSequence, Spawn, TypeMesh - Thank you to thezippotm and Crimson 
	-----
*/

//------------------------------------------------
//GitHub: https://github.com/NSACloud/MHR-EFX-Template
//Monster Hunter Modding Discord: https://discord.gg/gJwMdhK
LittleEndian();
local uint TEMPLATEVERSION = 6;

/*

NOTES:
If you map any of the unknowns, submit a pull request or issue on GitHub and I'll add the changes.

Set the character set to UTF-8 in View > Character Set

Not all attribute structs are mapped yet. Some that are mapped are not mapped correctly.

The template will get an error if a struct is unmapped or if a struct ends too early or too late.

If you get an error, look at unknSeqNum on the efx entries, the numbers usually have a pattern. If the values between two attributes vary significantly, something is probably wrong with the struct. 


For unmapped structs, use find to search for the struct name.


ISSUES:
Many structs are unmapped.
All attributes need to be tested and labeled.
Expression Structs aren't fully parsed
Clip Structs aren't fully parsed
The user variable section of the EOF struct isn't always correct, so it's commented out
*/

//MH Rise ItemType Enum
typedef enum <uint>
{
	Unknown = 0,
	FixRandomGenerator = 1,
	EffectOptimizeShader = 2,
	Spawn = 3,
	SpawnExpression = 4,
	Transform2D = 5,
	Transform2DModifierDelayFrame = 6,
	Transform2DModifier = 7,
	Transform2DClip = 8,
	Transform2DExpression = 9,
	Transform3D = 10,
	Transform3DModifierDelayFrame = 11,
	Transform3DModifier = 12,
	Transform3DClip = 13,
	Transform3DExpression = 14,
	ParentOptions = 15,
	EmitterColor = 16,
	EmitterColorClip = 17,
	PtSort = 18,
	TypeBillboard2D = 19,
	TypeBillboard2DExpression = 20,
	TypeBillboard3D = 21,
	TypeBillboard3DExpression = 22,
	TypeBillboard3DMaterial = 23,
	TypeBillboard3DMaterialClip = 24,
	TypeBillboard3DMaterialExpression = 25,
	TypeMesh = 26,
	TypeMeshClip = 27,
	TypeMeshExpression = 28,
	TypeRibbonFollow = 29,
	TypeRibbonLength = 30,
	TypeRibbonChain = 31,
	TypeRibbonFixEnd = 32,
	TypeRibbonLightweight = 33,
	TypeRibbonParticle = 34,
	TypeRibbonFollowMaterial = 35,
	TypeRibbonFollowMaterialClip = 36,
	TypeRibbonFollowMaterialExpression = 37,
	TypeRibbonLengthMaterial = 38,
	TypeRibbonLengthMaterialClip = 39,
	TypeRibbonLengthMaterialExpression = 40,
	TypeRibbonChainMaterial = 41,
	TypeRibbonChainMaterialClip = 42,
	TypeRibbonChainMaterialExpression = 43,
	TypeRibbonFixEndMaterial = 44,
	TypeRibbonFixEndMaterialClip = 45,
	TypeRibbonFixEndMaterialExpression = 46,
	TypeRibbonLightweightMaterial = 47,
	TypeRibbonLightweightMaterialClip = 48,
	TypeRibbonLightweightMaterialExpression = 49,
	TypeStrainRibbonMaterial = 50,
	TypeStrainRibbonMaterialClip = 51,
	TypeStrainRibbonMaterialExpression = 52,
	TypeRibbonFollowExpression = 53,
	TypeRibbonLengthExpression = 54,
	TypeRibbonChainExpression = 55,
	TypeRibbonFixEndExpression = 56,
	TypePolygon = 57,
	TypePolygonClip = 58,
	TypePolygonExpression = 59,
	TypePolygonMaterial = 60,
	TypeRibbonTrail = 61,
	TypePolygonTrail = 62,
	TypePolygonTrailMaterial = 63,
	TypeNoDraw = 64,
	TypeNoDrawExpression = 65,
	Velocity2DDelayFrame = 66,
	Velocity2D = 67,
	Velocity2DExpression = 68,
	Velocity3DDelayFrame = 69,
	Velocity3D = 70,
	Velocity3DExpression = 71,
	RotateAnimDelayFrame = 72,
	RotateAnim = 73,
	RotateAnimExpression = 74,
	ScaleAnimDelayFrame = 75,
	ScaleAnim = 76,
	ScaleAnimExpression = 77,
	VanishArea3D = 78,
	VanishArea3DExpression = 79,
	Life = 80,
	LifeExpression = 81,
	UVSequence = 82,
	UVSequenceModifier = 83,
	UVSequenceExpression = 84,
	UVScroll = 85,
	TextureUnit = 86,
	TextureUnitExpression = 87,
	TextureFilter = 88,
	EmitterShape2D = 89,
	EmitterShape2DExpression = 90,
	EmitterShape3D = 91,
	EmitterShape3DExpression = 92,
	AlphaCorrection = 93,
	ContrastHighlighter = 94,
	ColorGrading = 95,
	Blink = 96,
	Noise = 97,
	TexelChannelOperator = 98,
	TexelChannelOperatorClip = 99,
	TexelChannelOperatorExpression = 100,
	TypeStrainRibbon = 101,
	TypeStrainRibbonExpression = 102,
	TypeLightning3D = 103,
	TypeLightning3DExpression = 104,
	TypeLightning3DMaterial = 105,
	ShaderSettings = 106,
	ShaderSettingsExpression = 107,
	Distortion = 108,
	DistortionExpression = 109,
	VolumetricLighting = 110,
	RenderTarget = 111,
	PtLife = 112,
	PtBehavior = 113,
	PtBehaviorClip = 114,
	PlayEfx = 115,
	FadeByAngle = 116,
	FadeByAngleExpression = 117,
	FadeByEmitterAngle = 118,
	FadeByDepth = 119,
	FadeByDepthExpression = 120,
	FadeByOcclusion = 121,
	FadeByOcclusionExpression = 122,
	FakeDoF = 123,
	LuminanceBleed = 124,
	ScaleByDepth = 125,
	TypeNodeBillboard = 126,
	TypeNodeBillboardExpression = 127,
	UnitCulling = 128,
	FluidEmitter2D = 129,
	FluidSimulator2D = 130,
	PlayEmitter = 131,
	PtTransform3D = 132,
	PtTransform3DClip = 133,
	PtTransform2D = 134,
	PtTransform2DClip = 135,
	PtVelocity3D = 136,
	PtVelocity3DClip = 137,
	PtVelocity2D = 138,
	PtVelocity2DClip = 139,
	PtColliderAction = 140,
	PtCollision = 141,
	PtColor = 142,
	PtColorClip = 143,
	PtUvSequence = 144,
	PtUvSequenceClip = 145,
	MeshEmitter = 146,
	MeshEmitterClip = 147,
	MeshEmitterExpression = 148,
	ScreenSpaceEmitter = 149,
	VectorFieldParameter = 150,
	VectorFieldParameterClip = 151,
	VectorFieldParameterExpression = 152,
	GlobalVectorField = 153,
	GlobalVectorFieldClip = 154,
	GlobalVectorFieldExpression = 155,
	DirectionalFieldParameter = 156,
	DirectionalFieldParameterClip = 157,
	DirectionalFieldParameterExpression = 158,
	DepthOperator = 159,
	PlaneCollider = 160,
	PlaneColliderExpression = 161,
	DepthOcclusion = 162,
	ShapeOperator = 163,
	ShapeOperatorExpression = 164,
	WindInfluence3DDelayFrame = 165,
	WindInfluence3D = 166,
	Attractor = 167,
	AttractorClip = 168,
	AttractorExpression = 169,
	CustomComputeShader = 170,
	TypeGpuBillboard = 171,
	TypeGpuBillboardExpression = 172,
	TypeGpuPolygon = 173,
	TypeGpuRibbonFollow = 174,
	TypeGpuRibbonLength = 175,
	TypeGpuMesh = 176,
	TypeGpuMeshExpression = 177,
	TypeGpuMeshTrail = 178,
	TypeGpuMeshTrailClip = 179,
	TypeGpuMeshTrailExpression = 180,
	TypeGpuLightning3D = 181,
	EmitterPriority = 182,
	DrawOverlay = 183,
	VectorField = 184,
	VolumeField = 185,
	DirectionalField = 186,
	AngularVelocity3DDelayFrame = 187,
	AngularVelocity3D = 188,
	PtAngularVelocity3D = 189,
	PtAngularVelocity3DExpression = 190,
	AngularVelocity2DDelayFrame = 191,
	AngularVelocity2D = 192,
	PtAngularVelocity2D = 193,
	PtAngularVelocity2DExpression = 194,
	IgnorePlayerColor = 195,
	ProceduralDistortionDelayFrame = 196,
	ProceduralDistortion = 197,
	ProceduralDistortionClip = 198,
	ProceduralDistortionExpression = 199,
	TestBehaviorUpdater = 200,
	StretchBlur = 201,
	StretchBlurExpression = 202,
	EmitterHSV = 203,
	EmitterHSVExpression = 204,
	FlowMap = 205,
	RgbCommon = 206,
	RgbWater = 207,
	EmitMask = 208,
	TypeModularBillboard = 209,
	ItemNum = 210,
}ItemTypeEnum<comment = "Do not change this value, the file will break.">;

//RE8 ItemType Enum
//Was going to change the template to work with RE8, but not all of the underlying item structs are the same length, so decided against it.
/*
typedef enum <uint>
{
	Unknown = 0,
	FixRandomGenerator = 1,
	EffectOptimizeShader = 2,
	Spawn = 3,
	SpawnExpression = 4,
	Transform2D = 5,
	Transform2DModifierDelayFrame = 6,
	Transform2DModifier = 7,
	Transform2DClip = 8,
	Transform2DExpression = 9,
	Transform3D = 10,
	Transform3DModifierDelayFrame = 11,
	Transform3DModifier = 12,
	Transform3DClip = 13,
	Transform3DExpression = 14,
	ParentOptions = 15,
	EmitterColor = 16,
	EmitterColorClip = 17,
	PtSort = 18,
	TypeBillboard2D = 19,
	TypeBillboard2DExpression = 20,
	TypeBillboard3D = 21,
	TypeBillboard3DExpression = 22,
	TypeBillboard3DMaterial = 23,
	TypeBillboard3DMaterialClip = 24,
	TypeBillboard3DMaterialExpression = 25,
	TypeMesh = 26,
	TypeMeshClip = 27,
	TypeMeshExpression = 28,
	TypeRibbonFollow = 29,
	TypeRibbonLength = 30,
	TypeRibbonChain = 31,
	TypeRibbonFixEnd = 32,
	TypeRibbonLightweight = 33,
	TypeRibbonParticle = 34,
	TypeRibbonFollowMaterial = 35,
	TypeRibbonFollowMaterialClip = 36,
	TypeRibbonFollowMaterialExpression = 37,
	TypeRibbonLengthMaterial = 38,
	TypeRibbonLengthMaterialClip = 39,
	TypeRibbonLengthMaterialExpression = 40,
	TypeRibbonChainMaterial = 41,
	TypeRibbonChainMaterialClip = 42,
	TypeRibbonChainMaterialExpression = 43,
	TypeRibbonFixEndMaterial = 44,
	TypeRibbonFixEndMaterialClip = 45,
	TypeRibbonFixEndMaterialExpression = 46,
	TypeRibbonLightweightMaterial = 47,
	TypeRibbonLightweightMaterialClip = 48,
	TypeRibbonLightweightMaterialExpression = 49,
	TypeStrainRibbonMaterial = 50,
	TypeStrainRibbonMaterialClip = 51,
	TypeStrainRibbonMaterialExpression = 52,
	TypeRibbonFollowExpression = 53,
	TypeRibbonLengthExpression = 54,
	TypeRibbonChainExpression = 55,
	TypeRibbonFixEndExpression = 56,
	TypeRibbonLightweightExpression = 57,
	TypeRibbonParticleExpression = 58,
	TypePolygon = 59,
	TypePolygonClip = 60,
	TypePolygonExpression = 61,
	TypePolygonMaterial = 62,
	TypePolygonMaterialExpression = 63,
	TypeRibbonTrail = 64,
	TypePolygonTrail = 65,
	TypePolygonTrailExpression = 66,
	TypePolygonTrailMaterial = 67,
	TypePolygonTrailMaterialExpression = 68,
	TypeNoDraw = 69,
	TypeNoDrawExpression = 70,
	Velocity2DDelayFrame = 71,
	Velocity2D = 72,
	Velocity2DExpression = 73,
	Velocity3DDelayFrame = 74,
	Velocity3D = 75,
	Velocity3DExpression = 76,
	RotateAnimDelayFrame = 77,
	RotateAnim = 78,
	RotateAnimExpression = 79,
	ScaleAnimDelayFrame = 80,
	ScaleAnim = 81,
	ScaleAnimExpression = 82,
	VanishArea3D = 83,
	VanishArea3DExpression = 84,
	Life = 85,
	LifeExpression = 86,
	UVSequence = 87,
	UVSequenceModifier = 88,
	UVSequenceExpression = 89,
	UVScroll = 90,
	TextureUnit = 91,
	TextureUnitExpression = 92,
	TextureFilter = 93,
	EmitterShape2D = 94,
	EmitterShape2DExpression = 95,
	EmitterShape3D = 96,
	EmitterShape3DExpression = 97,
	AlphaCorrection = 98,
	ContrastHighlighter = 99,
	ColorGrading = 100,
	Blink = 101,
	Noise = 102,
	TexelChannelOperator = 103,
	TexelChannelOperatorClip = 104,
	TexelChannelOperatorExpression = 105,
	TypeStrainRibbon = 106,
	TypeStrainRibbonExpression = 107,
	TypeLightning3D = 108,
	TypeLightning3DExpression = 109,
	TypeLightning3DMaterial = 110,
	ShaderSettings = 111,
	ShaderSettingsExpression = 112,
	Distortion = 113,
	DistortionExpression = 114,
	VolumetricLighting = 115,
	RenderTarget = 116,
	PtLife = 117,
	PtBehavior = 118,
	PtBehaviorClip = 119,
	PlayEfx = 120,
	FadeByAngle = 121,
	FadeByAngleExpression = 122,
	FadeByEmitterAngle = 123,
	FadeByDepth = 124,
	FadeByDepthExpression = 125,
	FadeByOcclusion = 126,
	FadeByOcclusionExpression = 127,
	FakeDoF = 128,
	LuminanceBleed = 129,
	ScaleByDepth = 130,
	TypeNodeBillboard = 131,
	TypeNodeBillboardExpression = 132,
	UnitCulling = 133,
	FluidEmitter2D = 134,
	FluidEmitter2DClip = 135,
	FluidEmitter2DExpression = 136,
	FluidSimulator2D = 137,
	PlayEmitter = 138,
	PtTransform3D = 139,
	PtTransform3DClip = 140,
	PtTransform2D = 141,
	PtTransform2DClip = 142,
	PtVelocity3D = 143,
	PtVelocity3DClip = 144,
	PtVelocity2D = 145,
	PtVelocity2DClip = 146,
	PtColliderAction = 147,
	PtCollision = 148,
	PtColor = 149,
	PtColorClip = 150,
	PtUvSequence = 151,
	PtUvSequenceClip = 152,
	MeshEmitter = 153,
	MeshEmitterClip = 154,
	MeshEmitterExpression = 155,
	ScreenSpaceEmitter = 156,
	VectorFieldParameter = 157,
	VectorFieldParameterClip = 158,
	VectorFieldParameterExpression = 159,
	GlobalVectorField = 160,
	GlobalVectorFieldClip = 161,
	GlobalVectorFieldExpression = 162,
	DirectionalFieldParameter = 163,
	DirectionalFieldParameterClip = 164,
	DirectionalFieldParameterExpression = 165,
	DepthOperator = 166,
	PlaneCollider = 167,
	PlaneColliderExpression = 168,
	DepthOcclusion = 169,
	ShapeOperator = 170,
	ShapeOperatorExpression = 171,
	WindInfluence3DDelayFrame = 172,
	WindInfluence3D = 173,
	Attractor = 174,
	AttractorClip = 175,
	AttractorExpression = 176,
	CustomComputeShader = 177,
	TypeGpuBillboard = 178,
	TypeGpuBillboardExpression = 179,
	TypeGpuPolygon = 180,
	TypeGpuPolygonExpression = 181,
	TypeGpuRibbonFollow = 182,
	TypeGpuRibbonFollowExpression = 183,
	TypeGpuRibbonLength = 184,
	TypeGpuRibbonLengthExpression = 185,
	TypeGpuMesh = 186,
	TypeGpuMeshExpression = 187,
	TypeGpuMeshTrail = 188,
	TypeGpuMeshTrailClip = 189,
	TypeGpuMeshTrailExpression = 190,
	TypeGpuLightning3D = 191,
	EmitterPriority = 192,
	DrawOverlay = 193,
	VectorField = 194,
	VolumeField = 195,
	DirectionalField = 196,
	AngularVelocity3DDelayFrame = 197,
	AngularVelocity3D = 198,
	PtAngularVelocity3D = 199,
	PtAngularVelocity3DExpression = 200,
	AngularVelocity2DDelayFrame = 201,
	AngularVelocity2D = 202,
	PtAngularVelocity2D = 203,
	PtAngularVelocity2DExpression = 204,
	IgnorePlayerColor = 205,
	ProceduralDistortionDelayFrame = 206,
	ProceduralDistortion = 207,
	ProceduralDistortionClip = 208,
	ProceduralDistortionExpression = 209,
	TestBehaviorUpdater = 210,
	StretchBlur = 211,
	StretchBlurExpression = 212,
	EmitterHSV = 213,
	EmitterHSVExpression = 214,
	FlowMap = 215,
	RgbCommon = 216,
	RgbWater = 217,
	PtFreezer = 218,
	AssignCSV = 219,
	EmitMask = 220,
	TypeModularBillboard = 221,
	TypeModularRibbonFollow = 222,
	TypeModularRibbonLength = 223,
	TypeModularPolygon = 224,
	TypeModularMesh = 225,
	ItemNum = 226,  
}ItemTypeEnum;
*/


//UTILITY STRUCTS
typedef struct
{
	ubyte red<bgcolor=0x111199,fgcolor=0x0000FF>;
	ubyte green<bgcolor=0x119911,fgcolor=0x00FF00>;
	ubyte blue<bgcolor=0x991111,fgcolor=0xFF0000>;
	ubyte alpha<bgcolor=0x111111,fgcolor=0xAAAAAA>;
}Color<read=ReadColor>;

typedef struct
{
	float x;
	float y;
	float z;
}floatXYZ<read=ReadFloatXYZ>;

typedef struct
{
	int x;
	int y;
	int z;
}intXYZ<read=ReadIntXYZ>;

void ReadEFXAttribute()
{
	local uint itemType = ReadUInt();
	local ItemTypeEnum itemEnum = itemType;
	GetEFXItemStruct(EnumToString(itemEnum));
}


//EFX STRUCTS

typedef struct
{
	char type[4];
	int unkn0;//constant
	uint entryCount<bgcolor=0x22AA22>;
	uint entryLength<bgcolor=0x22AA22>;
	uint actionCount;
	uint fieldParameterCount;//Amount of "Field" efx attributes
	uint expressionParameterCount<bgcolor=0x226622>;
	uint collisionEffectCount<bgcolor=0x224422>;
	uint collisionEffectLength;
	uint boneCount<bgcolor=0x226622>;
	uint boneAttributeEntryCount;
	uint unknFlag;//Mainly used in cutscene efx, not sure of it's purpose. Example: vfx\editor\efd_evc\efd_evc1508\efd_0004_evc1508_00_0035.efx.2818730
}Header<optimize = false, bgcolor=0x2f4f4f>;
typedef struct
{
	string str;
}EntryName<bgcolor=0x22AA22,optimize=false>;
typedef struct
{
	string str;
	wstring unicodeStr;
}UnicodeEntryName<bgcolor=0x226622,optimize=false>;

typedef struct 
{       
		if (header.expressionParameterCount > 0)
		UnicodeEntryName expression_parameter_name[header.expressionParameterCount]<read=ReadUnicodeEntry>;
		if (header.boneCount > 0)
		UnicodeEntryName bone_name[header.boneCount]<read=ReadUnicodeEntry>;
		if (header.actionCount > 0)
		EntryName action_name[header.actionCount]<read=ReadStr>;
		if (header.fieldParameterCount > 0)
		EntryName field_parameter_name[header.fieldParameterCount]<read=ReadStr>;
		if (header.entryCount > 0)
		EntryName efx_name[header.entryCount]<read=ReadStr>;
		if (header.collisionEffectCount > 0)
		EntryName collision_effect_name[header.collisionEffectCount]<read=ReadStr>;
}EntryNames;
typedef struct 
{
	local int entryIndex = -999;
	short boneNameIndex;
}boneAttributeRelation<optimize = false>;

typedef struct
{
	local uint currentEntryIndex = parentof(this).i;
	uint expressionParameterNameHash;
	uint expressionHash;
	uint unkn2;
	int unkn3;
	uint unkn4;
	uint unkn5;
}ExpressionParameterValue<read=ReadExpressionParameter>;

typedef struct 
{
	local int i;
	for(i=0;i<header.expressionParameterCount;i++)
	{
		ExpressionParameterValue expressionParameter;
	}
	
}ExpressionParameterValues;
typedef struct
{
	local uint currentEntryIndex = parentof(this).i;
	uint boneNameHash;
	uint unknBoneValue;
}BoneValue<read=ReadBoneValue>;

typedef struct 
{
	local int i;
	for(i=0;i<header.boneCount;i++)
	{
		BoneValue boneValue;
	}
	
}BoneValues;
typedef struct
{
	local uint currentEntryIndex = parentof(this).i;
	uint unkn0;
	uint unkn1;
	uint unkn2;
	uint type;
	uint unkn4;
	uint unkn5;
	uint unkn6;
	uint unkn7;
	float unkn8;
	float unkn9;
	float unkn10;
	if (type == 184)
	{
		uint pathUnicodeCharCount;
		wstring filePath;
	}
}FieldParameterValue<read=ReadFieldParameter>;

typedef struct 
{
	local int i;
	for(i=0;i<header.fieldParameterCount;i++)
	{
		FieldParameterValue fieldParameter;
	}
	
}FieldParameterValues;

typedef struct
{
	
	if (header.expressionParameterCount != 0)
	{
		ExpressionParameterValues expressionParameterValues;
	}

	 if (header.boneCount != 0)
	{
		BoneValues boneValues;
	}

	struct
	{
		boneAttributeRelation relation[header.boneAttributeEntryCount]<read = ReadBoneAttributeRelation>;
	}boneAttributeRelations;
	
}SubHeader<optimize = false,bgcolor=0xffdddd>;
typedef struct
{
	uint actionUnkn0;
	uint actionUnkn1;
	uint actionAttributeCount;
	ReadEFXAttribute();
}Action;

typedef struct
{
	local uint currentEntryIndex = parentof(this).i;
	uint entryIndex;
	uint entryHeaderUnkn1;
	uint entryHeaderUnkn2;   
	int attributeCount<bgcolor=0x00dddd>;
	local int i;
	for(i=0;i<attributeCount;i++)
	{
		ReadEFXAttribute();
	}
}EFXEntry<bgcolor=0x000000,read=ReadEFXEntry>;

typedef struct
{
local int i;
	for(i=0;i<header.entryCount;i++)
	{
		EFXEntry entry;
	}
}EFXEntries;
typedef struct
{
	local uint currentEntryIndex = parentof(this).i;
	uint collisionEffectNameHash;
	uint unknHash;
	uint valueCount;
	uint value[valueCount];
}CollisionEffect<read=ReadCollisionEffect>;

typedef struct 
{
	local int i;
	for(i=0;i<header.collisionEffectCount;i++)
	{
		CollisionEffect collisionEffect<optimize=false>;
	}
	
}CollisionEffects;

typedef struct
{
	uint uvarStringCount;//This seems to be a count of uservariable strings on the end of the file
	ubyte eof[4];

	//Some files have the uvarString count higher than 0 but have no strings.
	//Uncomment the section below to test it
	
	/*
	if (uvarStringCount != 0)
	{
		struct
		{
			uint stringLength;
			wstring uvarString;
		}uvarString[uvarStringCount]<optimize=false>;
	}
	*/
}EOF<bgcolor=0x000000>;

void updateBoneAttributeRelations(Header& header,SubHeader& subheader,EFXEntries& mainBody){
	local int currentRelationIndex = 0;
	local int i;
	local int j;
	//Printf("%i\n",header.entryCount);
	for(i=0;i<header.entryCount;i++)
	{    
		for(j=0;j<mainBody.entry[i].attributeCount;j++)
		{
			switch(EnumToString(mainBody.entry[i].attribute[j].itemType))
			{
				case "ParentOptions":
				case "VanishArea3D":
				case "TypeStrainRibbon":
				case "Attractor":
				case "TypeLightning3D":
				{
					subheader.boneAttributeRelations.relation[currentRelationIndex].entryIndex = i;
					currentRelationIndex++; 
				}break;
				default:
				{

				}
			}
		}           			
	}
};

typedef struct
{
	Header header;
	EntryNames strings<optimize=false>;
	SubHeader subheader;
	if (header.actionCount != 0)
	{
		Action action[header.actionCount]<optimize=false, bgcolor=0x0000FF>;
	}
	if (header.fieldParameterCount != 0)
	{
		FieldParameterValues fieldParameterValues<optimize=false, bgcolor=0xAAFFAA>;
	}
	EFXEntries mainBody;
	updateBoneAttributeRelations(header,subheader,mainBody);
	if (header.collisionEffectCount != 0)
	{
		CollisionEffects collisionEffects<bgcolor=0xEEBBEE>;
	}
	
	EOF eof;
	
}EFXR<optimize=false>;


//READ FUNCTIONS
string ReadBoneAttributeRelation(boneAttributeRelation& input){
	string s;
	if (input.entryIndex != -999)
	{
		SPrintf(s, "%i, %s",input.boneNameIndex,parentof(parentof(parentof(input))).strings.efx_name[input.entryIndex].str);
	}
	else
	{
		s = "Failed to finish parsing efxr, it is likely that a struct that uses bones hasn't been marked as a struct that uses bones";
	}
	return s;
};


string ReadStr(EntryName& input){
	string s;
	SPrintf(s, "%s", input.str);
	return s;
};
string ReadUnicodeEntry(UnicodeEntryName& input){
	string s;
	SPrintf(s, "%s", input.str);
	return s;
};
string ReadFloatXYZ(floatXYZ& input){
	string s;
	SPrintf(s, "X:%f Y:%f Z:%f", input.x,input.y,input.z);
	return s;
};
string ReadIntXYZ(intXYZ& input){
	string s;
	SPrintf(s, "X:%i Y:%i Z:%i", input.x,input.y,input.z);
	return s;
};
string ReadColor(Color& input){
	string s;
	SPrintf(s, "RGBA: %u,%u,%u,%u", input.red,input.green,input.blue,input.alpha);
	return s;
};
string ReadEFXEntry(EFXEntry& input){
	string s;
	SPrintf(s, "%s", parentof(parentof(input)).strings.efx_name[input.currentEntryIndex].str);
	return s;
};
string ReadFieldParameter(FieldParameterValue& input){
	string s;
	SPrintf(s, "%s", parentof(parentof(input)).strings.field_parameter_name[input.currentEntryIndex].str);
	return s;
};
string ReadExpressionParameter(ExpressionParameterValue& input){
	string s;
	SPrintf(s, "%s", parentof(parentof(parentof(input))).strings.expression_parameter_name[input.currentEntryIndex].str);
	return s;
};
string ReadBoneValue(BoneValue& input){
	string s;
	SPrintf(s, "%s", parentof(parentof(parentof(input))).strings.bone_name[input.currentEntryIndex].str);
	return s;
};
string ReadCollisionEffect(CollisionEffect& input){
	string s;
	SPrintf(s, "%s", parentof(parentof(input)).strings.collision_effect_name[input.currentEntryIndex].str);
	return s;
};
void writeErrorToFile(int errorNum)//debug
{   
	//Uncomment to write failed structs to a file when an error occurs

	/*

	local string errorOutputPath = "F:\\MHR_EXTRACT\\efxErrorList.csv";
	local int currentFile = GetFileNum();
	local string s;
	SPrintf(s,"%i,%s\n",errorNum,GetFileName());
	
	if (FileExists(errorOutputPath))
	{
		FileSelect(FileOpen(errorOutputPath,false));
	}
	else
	{
		FileSelect(FileNew());
	}
	
	WriteString(FileSize(),s);
	FileSave(errorOutputPath);
	FileSelect(currentFile);

	*/

	if (errorNum == 999)
	{
		uint64 STRUCT_ERROR<bgcolor=0x0000FF,fgcolor=0x000000,comment="One of the previous structs is wrong. If this is an unchanged file, please report it.">;
	}
	else
	{
		uint64 UNMAPPED_STRUCT<bgcolor=0x0000FF,fgcolor=0x000000,comment="Struct ID is unmapped. Check that the previous struct is correct before mapping it.">;
	}
	Exit(errorNum);
}
//EFX ITEM TYPE STRUCTS 
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[14, 15, 16, 17, 18, 19, 20, 21, 22, 23] + 1865 more

	uint unkn1;//Values:[0, 1]
	float unkn2_0;//Values:[0.0, 0.009999999776482582, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.09000000357627869, 0.10000000149011612] + 92 more
	float unkn2_1;//Values:[0.0, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322] + 94 more
	float unkn2_2;//Values:[-2.6500000953674316, -2.2799999713897705, -2.2699999809265137, -1.75, -1.5800000429153442, -1.5499999523162842, -1.350000023841858, -1.2699999809265137, -1.149999976158142, -1.0] + 124 more
	
}AlphaCorrection<bgcolor=0x731727>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[41, 53, 85, 113]

	uint unkn1_0;//Values:[2]
	float unkn1_1;//Values:[0.25, 1.0]
	float unkn1_2;//Values:[0.10000000149011612, 0.5]
	uint null1_3;//Values:[0]
	uint null1_4;//Values:[0]
	float unkn1_5;//Values:[1.0]
	uint null1_6;//Values:[0]
	uint unkn1_7;//Values:[1078530011]
	float unkn1_8;//Values:[1.0, 4.0, 5.0, 10.0]
	float unkn1_9;//Values:[0.0, 1.0, 2.0, 3.0]
	float unkn1_10;//Values:[1.0, 4.0, 5.0, 10.0]
	float unkn1_11;//Values:[0.0, 1.0, 2.0, 3.0]
	float unkn1_12;//Values:[0.003490658476948738, 0.005235987715423107, 0.008726646192371845]
	float unkn1_13;//Values:[0.0026179938577115536]
	float unkn1_14;//Values:[1.0]

}AngularVelocity2D<bgcolor=0xf57685>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(191);

}AngularVelocity2DDelayFrame<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[14, 15, 16, 17, 22, 23, 24, 25, 26, 27] + 480 more

	uint unkn1_0;//Values:[0, 1, 2, 3, 4, 6]
	uint unkn1_1;//Values:[0, 1, 2, 4]
	float unkn1_2;//Values:[-3.0, -1.0, -0.5, -0.20000000298023224, 0.0, 0.009999999776482582, 0.013000000268220901, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549] + 45 more
	float unkn1_3;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448] + 19 more
	float unkn1_4;//Values:[-100.0, -2.0, -1.5, -1.0, -0.5, -0.14000000059604645, -0.10000000149011612, -0.07500000298023224, -0.05000000074505806, -0.009999999776482582] + 22 more
	float unkn1_5;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.5, 1.0] + 3 more
	float unkn1_6;//Values:[0.800000011920929, 0.9300000071525574, 0.9399999976158142, 0.949999988079071, 0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9900000095367432, 0.9990000128746033, 1.0] + 3 more
	float unkn1_7;//Values:[-0.2617993950843811, 0.0, 0.05235987901687622, 0.0872664600610733, 0.10471975803375244, 0.13962633907794952, 0.8726646304130554, 1.0471975803375244, 1.3962633609771729, 1.5707963705062866] + 1 more
	float unkn1_8;//Values:[0.0, 0.03490658476948738, 0.05235987901687622, 0.0872664600610733, 0.13962633907794952, 0.1745329201221466, 0.2617993950843811, 0.3490658402442932, 0.5235987901687622, 0.6981316804885864] + 7 more
	float unkn1_9;//Values:[-1.5707963705062866, -0.6981316804885864, -0.5235987901687622, 0.0, 0.01745329238474369, 0.05235987901687622, 0.0872664600610733, 0.10471975803375244, 0.13962633907794952, 0.1745329201221466] + 13 more
	float unkn1_10;//Values:[0.0, 0.03490658476948738, 0.05235987901687622, 0.06981316953897476, 0.0872664600610733, 0.1745329201221466, 0.3490658402442932, 0.4363323152065277, 0.5235987901687622, 0.6981316804885864] + 6 more
	float unkn1_11;//Values:[0.0, 0.05235987901687622, 0.0872664600610733, 0.10471975803375244, 0.7853981852531433, 1.0471975803375244, 3.1415927410125732]
	float unkn1_12;//Values:[0.0, 0.05235987901687622, 0.0872664600610733, 0.13962633907794952, 0.1745329201221466, 0.20943951606750488, 0.3490658402442932, 0.5235987901687622, 0.6981316804885864, 0.7853981852531433] + 4 more
	float unkn1_13;//Values:[-0.3490658402442932, -0.10471975803375244, -0.0872664600610733, 0.0, 0.0003490658418741077, 0.0008726646192371845, 0.001745329238474369, 0.0026179938577115536, 0.003490658476948738, 0.004363323096185923] + 22 more
	float unkn1_14;//Values:[0.0, 0.00017453292093705386, 0.0003490658418741077, 0.00043633230961859226, 0.0008726646192371845, 0.001745329238474369, 0.0026179938577115536, 0.003490658476948738, 0.004363323096185923, 0.005235987715423107] + 16 more
	float unkn1_15;//Values:[-0.5235987901687622, -0.1745329201221466, -0.12217304855585098, -0.10471975803375244, -0.0872664600610733, -0.05235987901687622, -0.04886921867728233, -0.03490658476948738, -0.01745329238474369, -0.011344639584422112] + 38 more
	float unkn1_16;//Values:[0.0, 3.490658491500653e-05, 0.00017453292093705386, 0.0003490658418741077, 0.00043633230961859226, 0.0008726646192371845, 0.001745329238474369, 0.003490658476948738, 0.004363323096185923, 0.005235987715423107] + 19 more
	float unkn1_17;//Values:[-0.05235987901687622, -0.03839724510908127, -0.01745329238474369, 0.0, 0.001745329238474369, 0.0020943949930369854, 0.003490658476948738, 0.004363323096185923, 0.005235987715423107, 0.006108652334660292] + 17 more
	float unkn1_18;//Values:[0.0, 0.00017453292093705386, 0.0003490658418741077, 0.0008726646192371845, 0.001745329238474369, 0.0026179938577115536, 0.003490658476948738, 0.004363323096185923, 0.005235987715423107, 0.008726646192371845] + 13 more
	float unkn1_19;//Values:[0.800000011920929, 0.8999999761581421, 0.9300000071525574, 0.949999988079071, 0.9599999785423279, 0.9700000286102295, 0.9750000238418579, 0.9800000190734863, 0.9850000143051147, 0.9879999756813049] + 8 more

}AngularVelocity3D<bgcolor=0x056e12>;//Example: natives\NSW\vfx\editor\efd_pl\efd_g-swd\efd_0004_g-swd_02_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[29, 92, 188, 244, 263, 282, 2154]

	uint frameDelay;//Values:[0, 5, 30, 60, 64, 72]
	uint unkn1;//Values:[0, 3]

}AngularVelocity3DDelayFrame<bgcolor=0x5eac94>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0006\efd_0004_evc0006_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[16, 17, 25, 27, 32, 42, 47, 49, 51, 60] + 188 more
	uint unkn1_0;//Values:[0, 2, 5]
	float unkn1_1;//Values:[-10.0, -8.0, -0.5, -0.4000000059604645, 0.0, 0.10000000149011612, 1.0, 2.0, 5.0, 10.0] + 2 more
	float unkn1_2;//Values:[-10.0, -5.0, -2.299999952316284, -2.0, -1.2000000476837158, -1.0, -0.5, 0.0, 0.10000000149011612, 0.20000000298023224] + 11 more
	float unkn1_3;//Values:[-10.0, -5.0, -2.0, -1.0, -0.20000000298023224, 0.0, 0.30000001192092896, 0.800000011920929, 1.0, 2.0] + 6 more
	float unkn1_4;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.8999999761581421, 1.0, 1.5, 1.5000100135803223, 2.0] + 29 more
	float unkn1_5;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.5, 1.0, 1.5, 1.600000023841858, 2.0, 2.5, 3.0] + 14 more
	float unkn1_6;//Values:[0.0, 0.30000001192092896, 0.5, 0.6000000238418579, 1.0, 1.600000023841858, 1.7000000476837158, 2.0, 2.200000047683716, 2.5] + 15 more
	float unkn1_7;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0] + 5 more
	uint boneNameLength;//Values:[2, 10, 16]
	wstring boneName;//Values:[16]		 

}Attractor<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[747, 2655]

	uint unkn1_0;//Values:[8]
	uint null1_1;//Values:[0]
	uint unkn1_2;//Values:[2]
	float unkn1_3;//Values:[40.0]
	uint unkn1_4;//Values:[1]
	uint unkn1_5;//Values:[2]
	uint null1_6;//Values:[0]
	uint unkn1_7;//Values:[8]
	uint unkn1_8;//Values:[24]
	uint null1_9;//Values:[0]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[5]
	float unkn1_12;//Values:[19.0]
	uint unkn1_13;//Values:[2]
	float unkn1_14;//Values:[5.0]
	float unkn1_15;//Values:[40.0]
	uint unkn1_16;//Values:[2]
	float unkn1_17;//Values:[5.0]
	

}AttractorClip<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_pl\efd_lan\efd_0004_lan_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(169);

}AttractorExpression<bgcolor=0xe78607>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 14, 15, 16, 17, 18, 22, 23, 24] + 713 more

	float unkn1_0;//Values:[0.0, 0.05000000074505806, 0.07000000029802322, 0.10000000149011612, 0.10999999940395355, 0.11999999731779099, 0.12000017613172531, 0.12999999523162842, 0.14000000059604645, 0.15000000596046448] + 36 more
	float unkn1_1;//Values:[0.38999998569488525, 0.5, 0.8999999761581421, 0.9800000190734863, 1.0]
	float unkn1_2;//Values:[0.009999999776482582, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071] + 26 more
	float unkn1_3;//Values:[0.0, 0.004999999888241291, 0.005000002682209015, 0.04999995231628418, 0.04999999701976776, 0.05000000447034836, 0.050000011920928955, 0.05000019073486328, 0.09999990463256836, 0.09999999403953552] + 15 more
	float unkn1_4;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0.44999998807907104, 0.5, 0.699999988079071, 0.800000011920929, 1.0] + 9 more
	float unkn1_5;//Values:[0.0, 0.10000002384185791, 0.19999998807907104, 0.20000003278255463, 0.20000004768371582, 0.2999999523162842, 2.0]
	float unkn1_6;//Values:[0.0, 0.30000001192092896, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0] + 9 more
	float unkn1_7;//Values:[0.0, 0.10000002384185791, 0.20000004768371582, 0.30000001192092896, 0.5, 1.0, 2.0, 3.0, 5.0, 8.0] + 3 more
	float unkn1_8;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.800000011920929, 1.0, 1.5] + 3 more
	float unkn1_9;//Values:[0.0, 0.09999999403953552, 0.10000000894069672, 0.10000002384185791, 0.19999998807907104, 0.20000000298023224, 0.20000004768371582, 0.5]

}Blink<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[14, 15, 16, 17, 18, 19, 20, 22, 23, 24] + 1258 more
	Color color0;//Unconfirmed
	Color color1;//Unconfirmed
	float unkn1_0;//Values:[0.0, 0.10000000149011612, 0.30000001192092896, 0.3499999940395355, 0.5, 1.0, 1.2000000476837158, 1.5, 1.600000023841858, 2.0] + 38 more
	float unkn1_1;//Values:[0.0, 0.25, 0.4000000059604645, 0.5, 0.6000000238418579, 0.75, 0.800000011920929, 1.0, 1.2000000476837158, 1.2999999523162842] + 31 more
	float unkn1_2;//Values:[0.0, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.09000000357627869, 0.10000000149011612, 0.10999999940395355] + 72 more
	float unkn1_3;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.09000000357627869] + 61 more

}ColorGrading<bgcolor=0xf57685>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(94);

}ContrastHighlighter<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(170);

}CustomComputeShader<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(162);

}DepthOcclusion<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(159);

}DepthOperator<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(186);

}DirectionalField<bgcolor=0x5eac94>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(156);

}DirectionalFieldParameter<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(157);

}DirectionalFieldParameterClip<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(158);

}DirectionalFieldParameterExpression<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 14, 16, 17, 18, 19, 20, 21, 22, 23] + 803 more
	uint unkn1;//Values:[0, 1, 2]
	float unkn2;//Values:[0.0, 0.00800000037997961, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322] + 38 more
	float unkn3;//Values:[0.0, 0.009999999776482582, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645] + 36 more
	float unkn4;//Values:[1.0, 1.100000023841858, 1.2000000476837158, 1.25, 1.2999999523162842, 1.399999976158142, 1.5, 1.7000000476837158, 1.7999999523162842, 2.0] + 39 more
	Color color;
}Distortion<bgcolor=0x0a2c0f>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[662]
	uint unkn1_0;//Values:[8]
	uint unkn1_1;//Values:[2]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[4]
	uint unkn1_5;//Values:[2]
	uint expressionLength;//Values:[28]
	ubyte expression[expressionLength];

}DistortionExpression<bgcolor=0x2a6866>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(183);

}DrawOverlay<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint nullSeqNum;//Values:[0]

	uint unkn1;//Values:[2167786889, 2194541850, 2199671034, 2205459918, 2220144888, 2226520788, 2243081839, 2249490229, 2278367350, 2281788504] + 279 more
	uint unkn2;//Values:[2152511075, 2157224387, 2160597096, 2171534824, 2180185772, 2183761604, 2200778752, 2201639389, 2241433062, 2244876519] + 277 more
	uint unkn3;//Values:[2174000431, 2342121151, 2527466087, 2976042402, 3031921930, 3136767376, 3173800241, 3178279148, 3280382693, 3516545565] + 31 more
	uint pathLength;//Values:[60, 62, 70, 74, 78, 80, 82, 84, 86, 88] + 55 more
	wstring shaderPath;//Values:[88] + 279 more

}EffectOptimizeShader<bgcolor=0xe23209>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[157, 165, 434, 441, 455, 520, 542, 571, 869, 2543] + 55 more

	uint unkn1;//Values:[1, 4]//Might be wrong
	
   
}EmitMask<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_10_0040.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[29, 30, 36, 43, 59, 66, 114, 134, 149, 310] + 5 more

	uint unkn1;//Values:[0, 1]
	uint unkn2;//Values:[0, 1]
	Color color;

}EmitterColor<bgcolor=0x2a6866>;//Example: F:\MHR_EXTRACT\extract\re_chunk_000\natives\NSW\vfx\editor\efd_evc\efd_evc1021\efd_0004_evc1021_00_0008.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[136, 312, 769, 778, 1028, 1045, 1540]

	uint unkn0;//Values:[15]
	uint null1;//Values:[0]
	uint unkn2;//Values:[2]
	float unkn3;//Values:[150.0, 170.0, 298.0, 549.0]
	uint unkn4;//Values:[4]
	uint unkn5;//Values:[12, 16]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[32]
	uint substruct2Length;//Values:[144, 192]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}

}EmitterColorClip<bgcolor=0xe23209>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(203);

}EmitterHSV<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(204);

}EmitterHSVExpression<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[7, 13, 19, 20, 23, 24, 25, 27, 29, 32] + 290 more//This struct might not be right

}EmitterPriority<bgcolor=0x056e12>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[37, 49, 155]

	float unkn1_0;//Values:[0.0, 3.0]
	float unkn1_1;//Values:[10.0, 11.0]
	float unkn1_2;//Values:[0.0, 1.0]
	float unkn1_3;//Values:[1.0]
	uint null1_4;//Values:[0]
	uint null1_5;//Values:[0]
	uint null1_6;//Values:[0]
	uint null1_7;//Values:[0]

}EmitterShape2D<bgcolor=0x363669>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(90);

}EmitterShape2DExpression<bgcolor=0xf57685>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[8, 11, 12, 13, 14, 17, 18, 19, 20, 21] + 2949 more
	float unkn1_0;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.07000000029802322, 0.07999999821186066] + 109 more
	float unkn1_1;//Values:[0.0, 9.999999747378752e-05, 0.0010000000474974513, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806] + 138 more
	float unkn1_2;//Values:[-100.0, -50.0, -30.0, -22.0, -20.0, -18.5, -18.0, -15.0, -13.5, -10.0] + 106 more
	float unkn1_3;//Values:[-50.0, -22.0, -20.0, -18.5, -18.0, -15.0, -13.5, -10.0, -4.0, -3.0] + 146 more
	float unkn1_4;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.10000000149011612, 0.11999999731779099] + 100 more
	float unkn1_5;//Values:[0.0, 9.999999747378752e-05, 0.0010000000474974513, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806] + 117 more
	uint unkn1_6;//Values:[0, 1, 2]
	uint unkn1_7;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 10] + 9 more
	uint unkn1_8;//Values:[0, 1, 2]
	uint unkn1_9;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 8 more
	uint unkn1_10;//Values:[0, 1, 2, 3, 4, 5, 6, 8, 9, 10] + 2 more
	float unkn1_11;//Values:[-3.1415927410125732, -2.460914373397827, -2.18166184425354, -2.0420353412628174, -1.9024090766906738, -1.692969560623169, -1.6580629348754883, -1.588249683380127, -1.5707963705062866, -1.4835299253463745] + 87 more
	float unkn1_12;//Values:[-5.864306449890137, -4.450590133666992, -4.36332368850708, -3.83972430229187, -3.1415927410125732, -2.984513282775879, -2.967059850692749, -2.8274335861206055, -2.8099801540374756, -2.792526960372925] + 212 more
	float unkn1_13;//Values:[-2.897246837615967, -2.4260077476501465, -2.286381483078003, -2.094395160675049, -2.0420353412628174, -1.919862151145935, -1.5707963705062866, -1.4835299253463745, -1.2217305898666382, -1.0471975803375244] + 72 more
	uint unkn2;//Values:[0, 1, 2, 3, 4, 5]
	ubyte unkn3;//Values:[0, 1]
	float unkn4_0;//Values:[0.0, 0.10000000149011612, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.5, 0.5235987901687622, 0.6981317400932312, 0.7853981852531433, 0.800000011920929] + 24 more
	float unkn4_1;//Values:[-1.5, -0.8999999761581421, -0.800000011920929, -0.75, -0.699999988079071, -0.6000000238418579, -0.5, -0.30000001192092896, -0.19999998807907104, 0.0] + 119 more
	float unkn4_2;//Values:[-1.5707963705062866, -1.2217305898666382, -1.0471975803375244, -0.9599310755729675, -0.8726646900177002, -0.8203047513961792, -0.7853981852531433, -0.767944872379303, -0.6981317400932312, -0.5235987901687622] + 40 more
	float unkn4_3;//Values:[-4.0, -1.5, -1.2999999523162842, -1.0, -0.8999999761581421, -0.800000011920929, -0.699999988079071, -0.6000000238418579, -0.5999999642372131, -0.5] + 64 more
   
}EmitterShape3D<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 35, 41, 59, 82, 86, 88, 101, 134, 142] + 41 more
	
	uint unkn1_0;//Values:[3, 4, 8, 12, 17, 21, 51, 63, 268]
	uint unkn1_1;//Values:[0, 2, 4]
	uint unkn1_2;//Values:[0, 2, 4]
	uint unkn1_3;//Values:[0, 2, 4]
	uint unkn1_4;//Values:[0, 2, 4]
	uint unkn1_5;//Values:[0, 2, 4]
	uint unkn1_6;//Values:[0, 2, 4]
	uint unkn1_7;//Values:[2]
	uint unkn1_8;//Values:[2]
	uint unkn1_9;//Values:[2, 4]
	uint expressionLength;//Values:[28, 44, 56, 84, 88, 116, 136, 140, 168, 176] + 2 more
	ubyte expression[expressionLength];

}EmitterShape3DExpression<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_em\efd_em099\efd_0004_em099_00_0130.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[16, 22, 41, 43, 47, 50, 53, 54, 57, 58] + 151 more

	uint unkn1_0;//Values:[0, 1, 2, 3, 4, 5, 7]
	float unkn1_1;//Values:[0.008726646192371845, 0.01745329238474369, 0.0263544712215662, 0.05235987901687622, 0.0872664600610733, 0.10611601918935776, 0.1186823919415474, 0.13962633907794952, 0.1457349956035614, 0.1745329201221466] + 37 more
	float unkn1_2;//Values:[0.0, 0.04520402476191521, 0.05235987901687622, 0.07941248267889023, 0.0872664600610733, 0.08936085551977158, 0.10471975803375244, 0.11658799648284912, 0.15917402505874634, 0.1745329201221466] + 21 more
	uint null1_3;//Values:[0]
	float unkn1_4;//Values:[-1.0, -0.9396926164627075, -0.8660253882408142, -0.7660444378852844, -0.32139378786087036, -8.742277657347586e-08, 0.0, 3.82137093032941e-15, 0.13917310535907745, 0.5] + 1 more
	float unkn1_5;//Values:[-1.0, -0.5735764503479004, -0.3420201241970062, 0.0, 0.7431448101997375, 1.0]
	float unkn1_6;//Values:[-1.0, -0.9902680516242981, -0.6691306233406067, -0.6427876353263855, -0.5000000596046448, -4.371138828673793e-08, 0.0, 4.371138828673793e-08, 0.3420201539993286, 0.6427876353263855] + 4 more

}FadeByAngle<bgcolor=0xf57685>;//Example: natives\NSW\vfx\editor\efd_ot\efd_airou\efd_0004_airou_10_0120.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(117);

}FadeByAngleExpression<bgcolor=0xe23209>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[13, 16, 17, 18, 19, 20, 21, 22, 23, 24] + 2512 more
	float unkn1;//Values:[0.0, 0.10000000149011612, 0.25, 0.30000001192092896, 0.5, 0.6000000238418579, 0.699999988079071, 0.75, 1.0, 1.2000000476837158] + 43 more
	float unkn2;//Values:[0.0, 0.20000000298023224, 0.5, 0.800000011920929, 1.0, 1.5, 2.0, 2.299999952316284, 2.5, 3.0] + 45 more
	float unkn3;//Values:[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] + 42 more
	float unkn4;//Values:[5.0, 6.0, 7.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 16.0] + 51 more
		  


}FadeByDepth<bgcolor=0x2f158b>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[2029]
	
	uint unkn1_0;//Values:[3]
	uint unkn1_1;//Values:[2]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[2]
	uint expressionLength;//Values:[56]
	ubyte expression[expressionLength];//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_01_0001.efx.2621987

}FadeByDepthExpression<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[32, 58, 110, 116, 123, 124, 126, 136, 137, 138] + 183 more

	uint unkn1_0;//Values:[0, 1]
	float unkn1_1;//Values:[0.2617993950843811, 0.34400439262390137, 0.3490658402442932, 0.4363323450088501, 0.5235987901687622, 0.6981316804885864, 0.7820820212364197, 0.7853981852531433, 0.8086110353469849, 0.8726646900177002] + 28 more
	float unkn1_2;//Values:[0.0, 0.1745329201221466, 0.2617993950843811, 0.3490658402442932, 0.3654719591140747, 0.4363323450088501, 0.45064401626586914, 0.5235987901687622, 0.6108652353286743, 0.6126105189323425] + 22 more
	float unkn1_3;//Values:[0.0, 0.2800000011920929, 1.0]
	float unkn1_4;//Values:[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 15.860931396484375]
	float unkn1_5;//Values:[0.5, 1.0, 2.0, 3.0, 3.555809497833252, 4.0, 15.860931396484375]

}FadeByEmitterAngle<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[61, 4252, 4256, 4257, 4262, 4311, 4378, 4987, 5018, 5035] + 8 more

	float unkn1;//Values:[1.0, 5.0]
	uint null2;//Values:[0]
	uint null3;//Values:[0]
	float unkn4;//Values:[0.0, 0.20000000298023224, 0.5]

}FadeByOcclusion<bgcolor=0x5eac94>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(122);

}FadeByOcclusionExpression<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(123);

}FakeDoF<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 16, 17, 18, 19, 20, 21] + 1374 more

	uint unkn1_0;//Values:[1, 2, 3, 4, 5, 6, 8]
	int unkn1_1;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 976 more
	int unkn1_2;//Values:[2, 3, 4, 5, 7, 8, 9, 10, 11, 17] + 44 more
	int unkn1_3;//Values:[3, 4, 5, 8, 10, 12, 13, 14, 17, 19] + 34 more
	int unkn1_4;//Values:[6, 8, 11, 12, 19, 20, 24, 26, 34, 41] + 22 more
	int unkn1_5;//Values:[-1, 20, 28, 29, 190, 143430518, 892541091, 915697610, 1591939501]
	int unkn1_6;//Values:[-1, 26, 34, 41, 1371090843, 1422145410, 1504854504]
	int unkn1_7;//Values:[-1, 29, 35, 42]
	int unkn1_8;//Values:[-1, 37, 40, 64]
	int unkn1_9;//Values:[-1, 0, 1, 2, 3]

}FixRandomGenerator<bgcolor=0x08a9e5>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_20_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(205);

}FlowMap<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(129);

}FluidEmitter2D<bgcolor=0x5eac94>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(130);

}FluidSimulator2D<bgcolor=0x3a2006>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(153);

}GlobalVectorField<bgcolor=0x2a6866>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(154);

}GlobalVectorFieldClip<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(155);

}GlobalVectorFieldExpression<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[254, 260, 271, 277, 351, 1683, 1717, 1817, 2475, 2543] + 1 more

}IgnorePlayerColor<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_bow\efd_0004_bow_00_0100.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(210);

}ItemNum<bgcolor=0x3f16f9>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[4, 10, 11, 12, 13, 15, 16, 17, 18, 19] + 3831 more
	uint fadeInDuration;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 40 more
	uint fadeInDurationRandom;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 42 more
	uint duration;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 123 more
	uint durationRandom;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 130 more
	uint fadeOutDuration;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 83 more
	uint fadeOutDurationRandom;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 87 more
	uint unkn7;//Values:[0, 1, 15, 20, 30, 90, 120]
	uint unkn8;//Values:[0, 1, 5, 14, 15, 20, 30, 90, 120]
	uint unkn9;//Values:[0, 1, 2]

}Life<bgcolor=0x7a5736>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[31, 37, 63, 70, 89, 109, 123, 135, 217, 223] + 7 more

	uint unkn1_0;//Values:[2, 6]
	uint unkn1_1;//Values:[2]
	uint unkn1_2;//Values:[2, 4]
	uint unkn1_3;//Values:[1, 2, 4]
	uint expressionLength;//Values:[28, 56, 88]
	ubyte expression[expressionLength];

}LifeExpression<bgcolor=0x5eac94>;//Example: natives\NSW\vfx\editor\efd_em\efd_em_shelltest\efd_0004_em000_02_0002.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(124);

}LuminanceBleed<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(146);

}MeshEmitter<bgcolor=0x3f16f9>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(147);

}MeshEmitterClip<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(148);

}MeshEmitterExpression<bgcolor=0xef6ade>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[23, 34, 43, 44, 45, 47, 50, 53, 62, 63] + 190 more

	float unkn1_0;//Values:[0.0, 0.042500004172325134, 0.04999999701976776, 0.05000000074505806, 0.07500000298023224, 0.08249999582767487, 0.09000000357627869, 0.10000000149011612, 0.11499999463558197, 0.11999999731779099] + 23 more
	float unkn1_1;//Values:[0.0, 0.017500001937150955, 0.019999999552965164, 0.02500000037252903, 0.032499998807907104, 0.03999999910593033, 0.05000000074505806, 0.05000000447034836, 0.054999999701976776, 0.06499999761581421] + 16 more
	float unkn1_2;//Values:[0.0, 0.003999999724328518, 0.014999999664723873, 0.019999999552965164, 0.05000000074505806, 0.07500000298023224, 0.08500000834465027, 0.10000000149011612, 0.10000000894069672, 0.125] + 30 more
	float unkn1_3;//Values:[0.0, 0.001999999862164259, 0.004999999888241291, 0.009999999776482582, 0.02500000037252903, 0.03500000387430191, 0.05000000074505806, 0.05000000447034836, 0.07500000298023224, 0.10000000149011612] + 23 more
	float unkn1_4;//Values:[0.0, 0.019999999552965164, 0.02500000037252903, 0.05000000074505806, 0.07500000298023224, 0.08999999612569809, 0.09000000357627869, 0.10000000149011612, 0.10000000894069672, 0.125] + 17 more
	float unkn1_5;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05000000447034836, 0.0624999962747097, 0.06499999761581421] + 11 more
	float unkn1_6;//Values:[0.0, 0.009999999776482582, 0.05999999865889549, 0.07500000298023224, 0.08500000834465027, 0.10000000149011612, 0.10000000894069672, 0.11499999463558197, 0.15000000596046448, 0.1550000011920929] + 28 more
	float unkn1_7;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.03500000387430191, 0.05000000074505806, 0.05000000447034836, 0.054999999701976776, 0.055000003427267075, 0.05999999865889549] + 23 more

}Noise<bgcolor=0x056e12>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1003\efd_0004_evc1003_00_0010.efx.2621987
typedef struct//unconfirmed
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[3, 8, 9, 10, 11, 14, 15, 16, 17, 18] + 3837 more
	intXYZ TranslationTrackingMode;
	intXYZ RotationTrackingMode;
	intXYZ ScaleTrackingMode;
	ubyte isUsingBone;//Values:[0, 1]
	float unkn2;//Values:[0.019999999552965164, 0.02500000037252903, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.3499999940395355, 0.4000000059604645, 0.5, 0.6000000238418579] + 4 more
	float unkn3;//Values:[0.0, 0.10000002384185791]
	uint unkn4;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 7 more
	uint unkn5;//Values:[0, 1, 2, 10]
	uint unkn6;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 14 more
	uint unkn7;//Values:[0, 2, 3, 5, 10]
	float unkn8;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.11999999731779099, 0.20000000298023224, 0.25, 0.30000001192092896] + 4 more
	uint boneNameLength;//Values:[2, 4, 8, 10, 12, 14, 16, 18, 20, 22] + 12 more
	wstring boneName;//Values:[22] + 209 more
}ParentOptions<bgcolor=0x7a5736>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(160);

}PlaneCollider<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(161);

}PlaneColliderExpression<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	uint efxPathLength;
	wstring efxPath;

}PlayEfx<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_em\efd_em042\efd_0004_em042_00_0012.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	uint fileSize;
	local int pos = FTell();
	EFXR action_efxr;
	FSeek(pos+fileSize);
	
}PlayEmitter<bgcolor=0xef6ade>;//Example: natives\NSW\vfx\editor\efd_ec\efd_ec017\efd_0004_ec017_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[12, 13, 16, 17, 19, 21, 22, 25, 26, 27] + 894 more
	uint unkn1;//Values:[0, 1, 2, 3]
	float unkn2_0;//Values:[1.0]
	float unkn2_1;//Values:[1.0, 2.0]
	float unkn2_2;//Values:[-8.0, -1.0, 0.0, 0.0005000000237487257, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5] + 20 more
	float unkn2_3;//Values:[-15.0, -0.75, -0.5, -0.49000000953674316, 0.0, 0.009999999776482582, 0.012000000104308128, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903] + 27 more
	float unkn2_4;//Values:[-0.5, 0.0, 0.009999999776482582, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.07999999821186066, 0.10000000149011612, 0.20000000298023224, 0.25] + 20 more
	float unkn2_5;//Values:[-1.0, -0.5, 0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.33000001311302185, 0.3499999940395355, 0.4000000059604645, 0.5] + 19 more
	float unkn2_6;//Values:[-5.0, -4.0, -1.25, -1.0, -0.5, -0.30000001192092896, -0.25, -0.2199999988079071, -0.20000000298023224, -0.11999999731779099] + 32 more
	float unkn2_7;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.035999998450279236, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.06499999761581421, 0.10000000149011612] + 24 more
	float unkn2_8;//Values:[0.0, 1.0, 2.0, 5.0, 10.0, 15.0, 20.0]
	float unkn2_9;//Values:[0.0, 1.0, 2.0, 3.0, 4.0, 7.0, 7.5, 8.0, 100.0]
	float unkn2_10;//Values:[0.0, 0.9800000190734863, 1.0, 2.0]
	float unkn2_11;//Values:[0.0, 0.30000001192092896, 1.0]
	float unkn2_12;//Values:[0.0, 0.009999999776482582, 0.10000000149011612]
	float unkn2_13;//Values:[0.0, 1.0]
	float unkn2_14;//Values:[0.0, 1.0, 4.0]
	float unkn2_15;//Values:[0.0, 1.0, 3.0, 5.0]
	float unkn2_16;//Values:[-1.0, 0.0, 0.10000000149011612, 0.30000001192092896]
	float unkn2_17;//Values:[0.0, 0.10000000149011612]

}ProceduralDistortion<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[29, 43, 104, 122, 130, 140, 247, 305, 2466, 2619] + 1 more

	uint unkn0;//Values:[8, 128, 136]
	uint null1;//Values:[0]
	int unkn2;//Values:[-1, 2]
	float unkn3;//Values:[7.0, 11.0, 90.0]
	uint unkn4;//Values:[1, 2]
	uint unkn5;//Values:[2, 3, 4]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[8, 16]
	uint substruct2Length;//Values:[24, 36, 48]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}

}ProceduralDistortionClip<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_00_9100.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[114, 115, 123, 130, 213, 368, 548, 564]

	uint frameDelay;//Values:[3, 200]
	uint null1;//Values:[0]

}ProceduralDistortionDelayFrame<bgcolor=0x4081ec>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc3026\efd_0004_evc3026_00_0007.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(199);

}ProceduralDistortionExpression<bgcolor=0x2f158b>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(193);

}PtAngularVelocity2D<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(194);

}PtAngularVelocity2DExpression<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(189);

}PtAngularVelocity3D<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(190);

}PtAngularVelocity3DExpression<bgcolor=0xfd1e6e>;
typedef struct// This typedef struct is wrong, will not work for all files
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[12, 13, 14, 15, 17, 18, 21, 23, 24, 25] + 233 more
	uint unkn1;//Values:[0, 2]
	uint stringLength;//Values:[29, 32, 33, 34, 35, 36, 53]
	uint substructCount;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 5 more
	string behaviorString;//Values:[9] + 1 more
	if (substructCount != 0)
	{
		struct
		{
			uint substructLength;
			uint unkn1;//Values:[0, 2]
			uint unkn2;
			uint unkn3;
			uint unkn4;
			char behaviorPropertyString[substructLength-16];
		}property[substructCount]<optimize=false>;
	}
	
	
	

}PtBehavior<bgcolor=0x02b72e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_ham\efd_0004_ham_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(114);

}PtBehaviorClip<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(140);

}PtColliderAction<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(141);

}PtCollision<bgcolor=0xe78607>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[24, 46, 67, 80, 96, 140, 148, 250, 256, 302] + 43 more

	uint unkn1;//Values:[0, 1]
	uint null2;//Values:[0]
	Color color0;		 

}PtColor<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0002\efd_0004_evc0002_00_0012.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[28, 48, 69, 91, 97, 142, 158, 163, 262, 267] + 50 more

	uint unkn0;//Values:[8, 15]
	uint unkn1;//Values:[0, 1]
	int unkn2;//Values:[-1, 2]
	float unkn3;//Values:[8.0, 10.0, 18.0, 19.0, 20.0, 25.0, 27.0, 30.0, 45.0, 60.0] + 8 more
	uint unkn4;//Values:[1, 4]
	uint unkn5;//Values:[2, 3, 4, 8, 12, 16]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[8, 32]
	uint substruct2Length;//Values:[24, 36, 48, 96, 144, 192]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}
	
}PtColorClip<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0002\efd_0004_evc0002_00_0012.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 18, 25, 36, 41, 56, 58, 60, 61, 62] + 159 more

	uint unkn1_0;//Values:[0, 1, 2, 3]
	uint unkn1_1;//Values:[0, 2, 3, 4]
	int unkn1_2;//Values:[-1, 0, 1, 2, 3, 4, 5]

}PtLife<bgcolor=0x056e12>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_00_9150.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[35, 116, 123, 135, 136, 147, 148, 149, 164, 176] + 12 more

	uint null1;//Values:[0]
	
}PtSort<bgcolor=0x363669>;//Example: natives\NSW\vfx\editor\efd_hm\efd_hm04\efd_0004_hm04_006_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(134);

}PtTransform2D<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(135);

}PtTransform2DClip<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[21, 31, 40, 56, 85, 92, 96, 132, 134, 149] + 16 more

	uint null1_0;//Values:[0]
	uint null1_1;//Values:[0]
	uint null1_2;//Values:[0]
	uint null1_3;//Values:[0]
	uint null1_4;//Values:[0]
	uint null1_5;//Values:[0]
	float unkn1_6;//Values:[1.0]
	float unkn1_7;//Values:[1.0]
	float unkn1_8;//Values:[1.0]

}PtTransform3D<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_10_0001.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[23, 33, 42, 58, 59, 87, 94, 98, 133, 137] + 16 more

	uint unkn0;//Values:[2, 7, 34, 448]
	uint null1;//Values:[0]
	int unkn2;//Values:[-1, 2]
	float unkn3;//Values:[5.0, 8.0, 9.0, 11.0, 15.0, 28.0, 30.0, 60.0, 95.0, 102.0] + 5 more
	uint unkn4;//Values:[1, 2, 3]
	uint unkn5;//Values:[4, 5, 6, 7, 8, 9, 10, 12, 15]
	uint unkn6;//Values:[0, 4]
	uint substruct1Length;//Values:[8, 16, 24]
	uint substruct2Length;//Values:[48, 60, 72, 84, 96, 108, 120, 144, 180]
	uint substruct3Length;//Values:[0, 64]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}PtTransform3DClip<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_10_0001.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[20749]

	uint unkn1_0;//Values:[2]
	uint null1_1;//Values:[0]
	uint null1_2;//Values:[0]

}PtUvSequence<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[20752]

	uint unkn0;//Values:[2]
	uint unkn1;//Values:[1]
	int unkn2;//Values:[-1]
	float unkn3;//Values:[100.0]
	uint unkn4;//Values:[1]
	uint unkn5;//Values:[4]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[8]
	uint substruct2Length;//Values:[48]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}PtUvSequenceClip<bgcolor=0x2a6866>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(138);

}PtVelocity2D<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(139);

}PtVelocity2DClip<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 29]

	uint null1_0;//Values:[0]
	float unkn1_1;//Values:[0.0, 1.0]
	uint null1_2;//Values:[0]
	uint null1_3;//Values:[0]

}PtVelocity3D<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc3027\efd_0004_evc3027_00_0007.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[14, 31]

	uint unkn0;//Values:[8, 15]
	uint unkn1;//Values:[0, 1]
	int unkn2;//Values:[-1]
	float unkn3;//Values:[51.0, 70.0]
	uint unkn4;//Values:[1, 4]
	uint unkn5;//Values:[3, 15]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[8, 32]
	uint substruct2Length;//Values:[36, 180]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}PtVelocity3DClip<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc3027\efd_0004_evc3027_00_0007.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[57]

	uint null1;//Values:[0]
	uint rtexPathLength;//Values:[122]
	wstring rtexPath;//Values:[122]

}RenderTarget<bgcolor=0x731727>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[1238, 2204, 2466]

	Color color0;
	float unkn1_0;//Values:[8.0]
	float unkn1_1;//Values:[10.0]
	float unkn1_2;//Values:[5.0]
	Color unkn1_3;//Values:[]
	float unkn1_4;//Values:[1.0]
	float unkn1_5;//Values:[0.5]
	float unkn1_6;//Values:[0.5]
	uint null1_7;//Values:[0]
	uint null1_8;//Values:[0]
	uint null1_9;//Values:[0]
	uint null1_10;//Values:[0]
	uint null1_11;//Values:[0]
	uint null1_12;//Values:[0]
	uint null1_13;//Values:[0]
	uint null1_14;//Values:[0]
	uint null1_15;//Values:[0]
	uint null1_16;//Values:[0]
	uint null1_17;//Values:[0]
	uint null1_18;//Values:[0]
	uint null1_19;//Values:[0]
	uint unkn1_20;//Values:[16777216]
	uint null1_21;//Values:[0]

}RgbCommon<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(207);

}RgbWater<bgcolor=0xef6ade>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 16, 17, 19, 20, 21] + 2018 more
	uint unkn1_0;//Values:[0, 1]
	float unkn1_1;//Values:[-0.6981317400932312, -0.4014257490634918, -0.39269909262657166, -0.3490658700466156, -0.2617993950843811, -0.1745329350233078, -0.15707963705062866, -0.13962635397911072, -0.12217305600643158, -0.10471976548433304] + 110 more
	float unkn1_2;//Values:[0.0, 8.726646046852693e-05, 0.00017453292093705386, 0.0003490658418741077, 0.0004363323387224227, 0.0005235988064669073, 0.0006981316837482154, 0.0008726646774448454, 0.0010471976129338145, 0.0013962633674964309] + 30 more
	float unkn2;//Values:[0.0, 1.7453292002755916e-06, 0.00017453292093705386, 0.0017453293548896909, 0.0034906587097793818, 0.00436332356184721, 0.0052359881810843945, 0.0069813174195587635, 0.00872664712369442, 0.010471976362168789] + 63 more
	float unkn3;//Values:[0.0, 0.0004363323387224227, 0.0008726646774448454, 0.0017453293548896909, 0.0026179940905421972, 0.0034906587097793818, 0.00436332356184721, 0.0052359881810843945, 0.00872664712369442, 0.01308997068554163] + 18 more
	float unkn4_0;//Values:[-0.6108652949333191, -0.2617993950843811, -0.20943953096866608, -0.1745329350233078, -0.15707963705062866, -0.13962635397911072, -0.10471976548433304, -0.0872664675116539, -0.06981317698955536, -0.05235988274216652] + 50 more
	float unkn4_1;//Values:[0.0, 8.726646046852693e-05, 0.0003490658418741077, 0.0004363323387224227, 0.0005235988064669073, 0.0008726646774448454, 0.0013089970452710986, 0.0017453293548896909, 0.0026179940905421972, 0.0034906587097793818] + 26 more
	float unkn4_2;//Values:[0.0, 0.699999988079071, 0.800000011920929, 0.8999999761581421, 0.9200000166893005, 0.9399999976158142, 0.9449999928474426, 0.949999988079071, 0.9599999785423279, 0.9649999737739563] + 22 more
	float unkn4_3;//Values:[0.0, 0.0005000000237487257, 0.0010000000474974513, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.05000000074505806]
	float unkn4_4;//Values:[0.0, 0.5, 0.800000011920929, 0.8500000238418579, 0.8999999761581421, 0.9200000166893005, 0.9300000071525574, 0.9399999976158142, 0.949999988079071, 0.9599999785423279] + 13 more
	float unkn4_5;//Values:[0.0, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164]
	float unkn4_6;//Values:[0.0, 0.699999988079071, 0.800000011920929, 0.8999999761581421, 0.9300000071525574, 0.9399999976158142, 0.949999988079071, 0.9599999785423279, 0.9700000286102295, 0.9750000238418579] + 9 more
	float unkn4_7;//Values:[0.0, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164]
	
	

}RotateAnim<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[27, 46, 165, 186, 193, 203, 213, 223, 242, 257] + 24 more

	uint frameDelay;//Values:[0, 1, 2, 20, 25, 30, 50, 60, 64, 65] + 3 more
	uint unkn2;//Values:[0, 3, 5, 10, 15]

}RotateAnimDelayFrame<bgcolor=0x2f158b>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(74);

}RotateAnimExpression<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] + 3085 more

				float unkn1_0;//Values:[-6.0, -5.0, -3.5, -3.0, -2.700000047683716, -2.0, -1.7000000476837158, -1.5, -1.25, -1.0] + 199 more
				float unkn1_1;//Values:[0.0, 9.999999747378752e-05, 0.00019999999494757503, 0.0002500000118743628, 0.00039999998989515007, 0.0005000000237487257, 0.0010000000474974513, 0.001500000013038516, 0.0020000000949949026, 0.0024999999441206455] + 25 more
				float unkn1_2;//Values:[0.0, 0.5, 0.550000011920929, 0.6000000238418579, 0.6499999761581421, 0.699999988079071, 0.7400000095367432, 0.75, 0.800000011920929, 0.8199999928474426] + 53 more
				float unkn1_3;//Values:[0.0, 0.0020000000949949026, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.10000000149011612]
				float unkn1_4;//Values:[-11.0, -2.0, -1.0, -0.8999999761581421, -0.550000011920929, -0.5, -0.30000001192092896, -0.25, -0.20000000298023224, -0.18000000715255737] + 86 more
				float unkn1_5;//Values:[0.0, 9.999999747378752e-05, 0.0003000000142492354, 0.0005000000237487257, 0.0010000000474974513, 0.0024999999441206455, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873] + 2 more
				float unkn1_6;//Values:[0.0, 0.009999999776482582, 0.550000011920929, 0.6000000238418579, 0.6100000143051147, 0.699999988079071, 0.7250000238418579, 0.75, 0.800000011920929, 0.8199999928474426] + 30 more
				float unkn1_7;//Values:[0.0, 0.0005000000237487257, 0.0010000000474974513, 0.004999999888241291, 0.009999999776482582, 0.20000000298023224]
				float unkn1_8;//Values:[-1.0789999961853027, -1.0, -0.8999999761581421, -0.8500000238418579, -0.800000011920929, -0.75, -0.5, -0.4000000059604645, -0.30000001192092896, -0.2199999988079071] + 82 more
				float unkn1_9;//Values:[0.0, 0.0010000000474974513, 0.0020000000949949026, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.023000000044703484, 0.029999999329447746] + 5 more
				float unkn1_10;//Values:[0.0, 0.5, 0.5849999785423279, 0.6000000238418579, 0.699999988079071, 0.800000011920929, 0.8199999928474426, 0.8500000238418579, 0.8799999952316284, 0.8999999761581421] + 27 more
				float unkn1_11;//Values:[0.0, 0.0005000000237487257, 0.004999999888241291, 0.20000000298023224, 2.0]
				float unkn1_12;//Values:[-30.0, -10.0, -1.0, -0.550000011920929, -0.30000001192092896, -0.20000000298023224, -0.15000000596046448, -0.11999999731779099, -0.10000000149011612, -0.09000000357627869] + 49 more
				float unkn1_13;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164]
				float unkn1_14;//Values:[0.0, 0.029999999329447746, 0.699999988079071, 0.800000011920929, 0.8799999952316284, 0.8999999761581421, 0.9100000262260437, 0.9300000071525574, 0.9399999976158142, 0.949999988079071] + 9 more
				float unkn1_15;//Values:[0.0, 0.004999999888241291, 0.20000000298023224]

}ScaleAnim<bgcolor=0x2a6866>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[18, 33, 57, 118, 125, 171, 195, 205, 215, 225] + 66 more

	uint frameDelay;//Values:[0, 1, 2, 3, 4, 5, 6, 8, 9, 10] + 17 more
	uint unkn2;//Values:[0, 2, 3, 5, 10]

}ScaleAnimDelayFrame<bgcolor=0x5eac94>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{

	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[260, 6540, 6825, 7745, 22396, 23596]
	uint unkn1;//Values:[1]
	uint unkn2;//Values:[0, 2, 4]
	uint unkn3;//Values:[0, 2]
	uint expressionLength;//Values:[44, 256]
	ubyte expression[expressionLength];

}ScaleAnimExpression<bgcolor=0xf57685>;//Example: natives\NSW\vfx\editor\efd_em\efd_em099\efd_0004_em099_00_0130.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 33, 41, 59, 70, 79, 100, 151, 157, 165] + 141 more
	uint unkn1;//Values:[0, 1, 3]
	float unkn2_0;//Values:[0.009999999776482582, 1.0, 1.5, 2.0, 3.0, 5.0]
	float unkn2_1;//Values:[0.009999999776482582, 1.0, 2.0, 3.0, 5.0, 6.0, 10.0, 12.0]
	float unkn2_2;//Values:[0.6000000238418579, 1.0, 1.2000000476837158, 2.0, 2.1999998092651367, 3.0, 9.0, 10.0]
	float unkn2_3;//Values:[2.0, 3.0, 5.0, 6.0, 12.0, 15.0, 16.0, 18.0, 20.0, 25.0] + 3 more
	float unkn2_4;//Values:[4.0, 8.0, 10.0, 15.0, 20.0, 30.0, 50.0, 70.0, 120.0, 510.0] + 2 more
	float unkn2_5;//Values:[0.0, 0.10000000149011612, 0.5, 1.0, 1.2000000476837158, 2.0, 3.0, 4.0, 5.0, 10.0] + 1 more

}ScaleByDepth<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_50_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(149);

}ScreenSpaceEmitter<bgcolor=0x3f16f9>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[7, 11, 12, 13, 14, 15, 16, 17, 18, 19] + 3241 more
	float unkn1;//Values:[-100.0, -3.0, -2.0, -1.5, -1.2000000476837158, -1.0, -0.5, -0.30000001192092896, -0.20000000298023224, -0.10000000149011612] + 48 more
	uint unkn2;//Values:[0, 1, 2, 3, 4]
	float unkn3;//Values:[-1500.0, -1000.0, -500.0, -250.0, -200.0, -190.0, -150.0, -100.0, -90.0, -80.0] + 96 more
	uint unkn4;//Values:[2564, 3076, 3084, 3204, 3584, 3588, 3592, 3596, 3600, 3604] + 4 more
	Color unkn5;//Values:[]
	float unkn6;//Values:[0.15000000596046448]
	float unkn7;//Values:[0.15000000596046448]
	float unkn8;//Values:[1.0]
	float unkn9;//Values:[1.0]
	float unkn10;//Values:[1.0]
	float unkn11;//Values:[100.0]
	uint null12;//Values:[0]
	uint null13;//Values:[0]
	uint null14;//Values:[0] 
	float unkn15;//Values:[0.0, 0.07999999821186066, 0.125, 0.15000000596046448, 0.17000000178813934, 0.18000000715255737, 0.20000000298023224, 0.20999999344348907, 0.2199999988079071, 0.23000000417232513] + 25 more
	float unkn16;//Values:[0.039799999445676804, 0.06499999761581421, 0.0697999969124794, 0.07980000227689743, 0.08980000019073486, 0.0997999981045723, 0.10000000149011612, 0.11999999731779099, 0.125, 0.13979999721050262] + 12 more
	float unkn17;//Values:[0.20000000298023224]
	uint unkn18;//Values:[0, 1]
	float unkn19;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.18000000715255737, 0.20000000298023224, 0.25, 0.2800000011920929, 0.28999999165534973, 0.30000001192092896, 0.33000001311302185] + 16 more
	float unkn20;//Values:[0.0, 0.20000000298023224, 0.30000001192092896, 0.3499999940395355, 0.5, 0.6000000238418579, 0.800000011920929, 1.0]
	float unkn21;//Values:[0.0, 0.44999998807907104, 0.5, 0.550000011920929, 0.5600000023841858, 0.6000000238418579, 0.699999988079071, 0.7200000286102295, 0.75, 0.7900000214576721] + 5 more
	float unkn22;//Values:[5.0, 10.0, 20.0, 30.0, 100.0]
	float unkn23;//Values:[1.0]
	float unkn24;//Values:[0.0, 0.5]
   

}ShaderSettings<bgcolor=0x02b72e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(107);

}ShaderSettingsExpression<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(163);

}ShapeOperator<bgcolor=0xf57685>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(164);

}ShapeOperatorExpression<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[2, 8, 9, 10, 11, 12, 14, 15, 16, 17] + 3833 more
	uint instancesSpawnedTotal;//Values:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + 62 more//Unconfirmed
	uint instancesSpawnedPerFrame;//Values:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + 62 more//Unconfirmed
	uint unkn3;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 48 more
	uint unkn4;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 46 more
	uint unkn5;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 72 more
	uint unkn6;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 78 more
	uint unkn7;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 56 more
	uint unkn8;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 55 more
	uint spawnDelay;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 310 more
	uint spawnDelayRandom;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 310 more
   

}Spawn<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[152, 175, 286, 330, 344, 1004, 1242, 1259, 1290, 1390] + 11 more
	uint unkn1;//Values:[1, 3, 4, 12]
	uint unkn2;//Values:[0, 1, 2, 4]
	uint unkn3;//Values:[2, 4]
	uint unkn4;//Values:[2, 4]
	uint unkn5;//Values:[2, 4]
	uint unkn6;//Values:[2]
	uint unkn7;//Values:[2]
	uint expressionLength;//Values:[44, 52, 84, 104, 120, 200]
	ubyte expression[expressionLength];

}SpawnExpression<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(201);

}StretchBlur<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(202);

}StretchBlurExpression<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(200);

}TestBehaviorUpdater<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 16, 17, 19, 20, 26, 27, 28, 29, 30] + 437 more

	uint unkn1_0;//Values:[0, 1000593162, 1008981770, 1014350479, 1017370378, 1022739087, 1025758986, 1028443341, 1031127695, 1040522936] + 15 more
	float unkn1_1;//Values:[0.0, 1.0, 2.4200000762939453, 3.0, 3.630000114440918, 4.800000190734863, 5.0, 6.650000095367432, 7.0, 7.960000038146973] + 69 more
	Color unkn1_2;//Values:[] + 88 more
	float unkn1_3;//Values:[0.0, 0.009999999776482582, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.09000000357627869, 0.10000000149011612, 0.11999999731779099, 0.20000000298023224, 0.20999999344348907] + 31 more
	float unkn1_4;//Values:[0.0, 0.009999999776482582, 0.029999999329447746, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.09000000357627869, 0.10000000149011612, 0.10999999940395355] + 19 more
	float unkn1_5;//Values:[0.0, 0.009999999776482582, 1.0, 2.0, 2.640000104904175, 3.0, 4.980000019073486, 5.0, 5.190000057220459, 5.28000020980835] + 38 more
	float unkn1_6;//Values:[0.0, 0.5, 0.800000011920929, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0] + 7 more
	float unkn1_7;//Values:[0.10000000149011612, 0.11999999731779099, 0.15000000596046448, 0.30000001192092896, 0.3799999952316284, 0.5, 0.6000000238418579, 0.699999988079071, 0.75, 0.800000011920929] + 12 more
	float unkn1_8;//Values:[0.05000000074505806, 0.07999999821186066, 0.09000000357627869, 0.10999999940395355, 0.12999999523162842, 0.1599999964237213, 0.18000000715255737, 0.1899999976158142, 0.20000000298023224, 0.23999999463558197] + 9 more
	float unkn1_9;//Values:[0.0, 0.800000011920929, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0]
	uint unkn1_10;//Values:[0, 1]
	uint unkn1_11;//Values:[0, 2, 5]
	uint unkn1_12;//Values:[0, 2, 5]
	uint unkn1_13;//Values:[0, 5, 8, 10, 15, 20, 25, 30, 45, 60] + 1 more
	uint unkn1_14;//Values:[0, 5, 8, 10, 15, 20, 25, 30, 45, 60] + 1 more
	uint unkn1_15;//Values:[0, 15, 16, 20, 30, 40, 45, 50, 60, 70] + 6 more
	uint unkn1_16;//Values:[0, 15, 16, 20, 30, 45, 50, 60, 70, 80] + 6 more

}TexelChannelOperator<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[212, 295, 309, 320, 514, 520, 573, 574, 712, 756] + 41 more

	uint unkn0;//Values:[2, 130, 512]
	uint null1;//Values:[0]
	uint unkn2;//Values:[2]
	float unkn3;//Values:[25.0, 55.0, 60.0, 80.0, 110.0, 130.0]
	uint unkn4;//Values:[1, 2]
	uint unkn5;//Values:[2, 4, 5]
	uint unkn6;//Values:[0, 2]
	uint substruct1Length;//Values:[8, 16]
	uint substruct2Length;//Values:[24, 48, 60]
	uint substruct3Length;//Values:[0, 32]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}TexelChannelOperatorClip<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_09_0011.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(100);

}TexelChannelOperatorExpression<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 15, 16, 17, 18, 19, 20, 21, 22, 25] + 1186 more
	float unkn1;//Values:[0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.05999999865889549, 0.07999999821186066, 0.10000000149011612, 0.11999999731779099, 0.12999999523162842, 0.14000000059604645, 0.15000000596046448] + 139 more
	float unkn2;//Values:[0.0, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.05999999865889549, 0.07999999821186066, 0.09000000357627869, 0.10000000149011612, 0.10999999940395355, 0.12999999523162842] + 37 more
	float unkn3;//Values:[0.0, 0.18000000715255737]
}TextureFilter<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0000.efx.2621987
typedef struct//Struct may be incorrect, might not be fixed length
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[35, 120, 183, 215, 259, 276, 280, 360, 378, 449] + 12 more

	uint unkn1_0;//Values:[81955, 81967, 81975, 87331, 87335]
	uint unkn1_1;//Values:[320, 448, 458, 1018]
	int unkn1_2;//Values:[-1] + 18 more
	float unkn1_3;//Values:[1.0, 26.0]
	uint null1_4;//Values:[0]
	uint null1_5;//Values:[0]
	float unkn1_6;//Values:[0.0, 0.25, 1.7999999523162842]
	uint null1_7;//Values:[0]
	float unkn1_8;//Values:[0.0, 0.10000000149011612]
	uint null1_9;//Values:[0]
	float unkn1_10;//Values:[-0.004999999888241291, 0.0, 0.007000000216066837, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224]
	uint null1_11;//Values:[0]
	float unkn1_12;//Values:[0.5, 1.0]
	uint null1_13;//Values:[0]
	float unkn1_14;//Values:[0.800000011920929, 0.8999999761581421, 0.9700000286102295, 1.0]
	uint null1_15;//Values:[0]
	float unkn1_16;//Values:[0.0, 90.0, 180.0]
	uint null1_17;//Values:[0]
	uint null1_18;//Values:[0]
	uint null1_19;//Values:[0]
	float unkn1_20;//Values:[1.0]
	uint null1_21;//Values:[0]
	float unkn1_22;//Values:[0.699999988079071, 0.75, 1.0, 2.0, 3.0, 4.0]
	uint null1_23;//Values:[0]
	float unkn1_24;//Values:[-1.0, 0.699999988079071, 1.0, 3.0, 4.0]
	uint null1_25;//Values:[0]
	uint null1_26;//Values:[0]
	uint null1_27;//Values:[0]
	float unkn1_28;//Values:[-0.029999999329447746, 0.0]
	uint null1_29;//Values:[0]
	float unkn1_30;//Values:[1.0]
	uint null1_31;//Values:[0]
	float unkn1_32;//Values:[1.0]
	uint null1_33;//Values:[0]
	uint null1_34;//Values:[0]
	uint null1_35;//Values:[0]
	uint null1_36;//Values:[0]
	uint null1_37;//Values:[0]
	float unkn1_38;//Values:[1.0]
	float unkn1_39;//Values:[1.0]
	uint unkn1_40;//Values:[356, 448, 453, 464, 480, 485, 1664, 1984]
	int unkn1_41;//Values:[-1] + 20 more
	float unkn1_42;//Values:[1.0, 4.0, 50.0, 100.0]
	uint null1_43;//Values:[0]
	float unkn1_44;//Values:[0.0, 1.0]
	float unkn1_45;//Values:[0.0, 0.10000000149011612, 0.800000011920929, 1.2000000476837158]
	float unkn1_46;//Values:[0.0, 1.0]
	float unkn1_47;//Values:[-0.004999999888241291, -0.0010000000474974513, 0.0, 0.0010000000474974513, 0.004999999888241291]
	uint null1_48;//Values:[0]
	float unkn1_49;//Values:[-0.05000000074505806, -0.02500000037252903, -0.009999999776482582, -0.004999999888241291, -0.0020000000949949026, 0.0, 0.0007999999797903001, 0.004999999888241291, 0.009999999776482582]
	uint null1_50;//Values:[0]
	float unkn1_51;//Values:[1.0]
	uint null1_52;//Values:[0]
	float unkn1_53;//Values:[0.9399999976158142, 0.9800000190734863, 1.0]
	uint null1_54;//Values:[0]
	uint null1_55;//Values:[0]
	float unkn1_56;//Values:[0.0, 10.0]
	uint null1_57;//Values:[0]
	uint null1_58;//Values:[0]
	float unkn1_59;//Values:[1.0]
	uint null1_60;//Values:[0]
	float unkn1_61;//Values:[0.800000011920929, 1.0, 1.25, 1.7000000476837158, 2.0]
	uint null1_62;//Values:[0]
	float unkn1_63;//Values:[0.5, 0.550000011920929, 0.6000000238418579, 0.6499999761581421, 1.0, 1.5, 1.7000000476837158, 2.0, 3.0]
	uint null1_64;//Values:[0]
	float unkn1_65;//Values:[0.0, 0.10000000149011612]
	uint null1_66;//Values:[0]
	float unkn1_67;//Values:[-0.10000000149011612, 0.0, 0.029999999329447746]
	uint null1_68;//Values:[0]
	float unkn1_69;//Values:[1.0]
	uint null1_70;//Values:[0]
	float unkn1_71;//Values:[0.9900000095367432, 1.0]
	uint null1_72;//Values:[0]
	uint null1_73;//Values:[0]
	uint unkn1_74;//Values:[0, 10]
	uint null1_75;//Values:[0]
	uint null1_76;//Values:[0]
	float unkn1_77;//Values:[0.44999998807907104, 0.5, 0.550000011920929, 0.6000000238418579, 1.0]
	float unkn1_78;//Values:[0.44999998807907104, 0.550000011920929, 0.6000000238418579, 1.0]
	uint unkn1_79;//Values:[448, 453, 464]
	int unkn1_80;//Values:[-1] + 20 more
	float unkn1_81;//Values:[1.0]
	float unkn1_82;//Values:[0.0, 0.30000001192092896]
	float unkn1_83;//Values:[0.0, 1.0]
	uint null1_84;//Values:[0]
	float unkn1_85;//Values:[0.0, 1.0]
	uint null1_86;//Values:[0]
	uint null1_87;//Values:[0]
	float unkn1_88;//Values:[0.0, 0.004999999888241291]
	uint null1_89;//Values:[0]
	float unkn1_90;//Values:[1.0]
	uint null1_91;//Values:[0]
	float unkn1_92;//Values:[1.0]
	uint null1_93;//Values:[0]
	uint null1_94;//Values:[0]
	uint null1_95;//Values:[0]
	uint null1_96;//Values:[0]
	uint null1_97;//Values:[0]
	float unkn1_98;//Values:[1.0]
	uint null1_99;//Values:[0]
	float unkn1_100;//Values:[1.0, 1.2000000476837158, 1.5]
	uint null1_101;//Values:[0]
	float unkn1_102;//Values:[0.800000011920929, 1.0, 1.5]
	uint null1_103;//Values:[0]
	float unkn1_104;//Values:[0.0, 0.10000000149011612]
	uint null1_105;//Values:[0]
	float unkn1_106;//Values:[-0.10000000149011612, 0.0]
	uint null1_107;//Values:[0]
	float unkn1_108;//Values:[1.0]
	uint null1_109;//Values:[0]
	float unkn1_110;//Values:[1.0]
	uint null1_111;//Values:[0]
	uint null1_112;//Values:[0]
	uint null1_113;//Values:[0]
	uint null1_114;//Values:[0]
	uint null1_115;//Values:[0]
	float unkn1_116;//Values:[1.0]
	float unkn1_117;//Values:[1.0]
	uint uvs0PathUnicodeCharCount;//Values:[32, 36]
	uint uvs1PathUnicodeCharCount;//Values:[32, 36]
	uint uvs2PathUnicodeCharCount;//Values:[1, 32]
	wstring uvs0Path;//Values:[32]
	wstring uvs1Path;//Values:[32]
	wstring uvs2Path;//Values:[32]
}TextureUnit<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(87);

}TextureUnitExpression<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[1, 13, 90, 92, 207, 232]
	float pos_x;//Values:[256.0, 288.0, 512.0, 750.0, 800.0, 1024.0, 1500.0]
	float pos_y;//Values:[-200.0, -100.0, -78.0, -75.0, -4.0, 256.0, 2500.0]
	uint rot;//Values:[0]
	float scale_x;//Values:[1.0]
	float scale_y;//Values:[1.0]

}Transform2D<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(8);

}Transform2DClip<bgcolor=0xe78607>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(9);

}Transform2DExpression<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(7);

}Transform2DModifier<bgcolor=0xe23209>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	uint frameDelay;
	uint unkn1;

}Transform2DModifierDelayFrame<bgcolor=0xef6ade>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[1, 7, 8, 9, 10, 13, 14, 15, 16, 17] + 3876 more
	floatXYZ Translation;
	floatXYZ Rotation;
	floatXYZ Scale;
	uint unkn1;//Values:[0, 1, 2, 3, 4, 5]

}Transform3D<bgcolor=0x731727>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[16, 76, 106, 111, 123, 158, 169, 218, 219, 284] + 79 more
	uint unkn0;//Values:[0, 2, 3, 6, 128, 192, 264, 448, 452]
	uint null1;//Values:[0]
	int unkn2;//Values:[-1, 0, 2]
	float unkn3;//Values:[0.0, 3.0, 9.0, 10.0, 15.0, 16.0, 19.0, 20.0, 30.0, 40.0] + 8 more
	uint unkn4;//Values:[0, 1, 2, 3, 4]
	uint unkn5;//Values:[0, 2, 3, 4, 5, 6, 9, 12, 18]
	uint unkn6;//Values:[0, 3, 9]
	uint substruct1Length;//Values:[0, 8, 16, 24, 32]
	uint substruct2Length;//Values:[0, 24, 36, 48, 60, 72, 108, 144, 216]
	uint substruct3Length;//Values:[0, 48, 144]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}Transform3DClip<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_00_9150.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[34, 57, 78, 84, 99, 112, 117, 119, 128, 132] + 275 more
	uint unkn1;//Values:[0, 2, 4, 7, 16, 48, 55, 56, 63, 64] + 12 more
	uint unkn2;//Values:[0, 2, 4]
	uint unkn3;//Values:[0, 2, 4]
	uint unkn4;//Values:[0, 2, 4]
	uint unkn5;//Values:[0, 2, 4]
	uint unkn6;//Values:[0, 1, 2, 4]
	uint unkn7;//Values:[0, 2, 4]
	uint unkn8;//Values:[0, 1, 2, 3, 4]
	uint unkn9;//Values:[0, 1, 2, 3, 4]
	uint unkn10;//Values:[0, 1, 2, 4]
	uint expressionLength;//Values:[0, 28, 32, 44, 52, 56, 60, 68, 72, 84] + 29 more
	ubyte expression[expressionLength];

}Transform3DExpression<optimize=false,bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[12, 14, 15, 16, 24, 25, 26, 27, 28, 29] + 1200 more
	uint unkn1_0;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 18, 19] + 28 more
	uint null1_1;//Values:[0]
	float unkn1_2;//Values:[0.0, 0.10000000149011612, 0.20000000298023224]
	float unkn1_3;//Values:[-0.25, -0.15000000596046448, 0.0]
	float unkn1_4;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.5, 2.0]
	float unkn1_5;//Values:[0.0, 0.10000000149011612]
	float unkn1_6;//Values:[0.0, 0.10000000149011612, 0.20000000298023224]
	float unkn1_7;//Values:[0.0, 0.01745329424738884, 0.03490658849477768, 0.1745329350233078, 0.3490658700466156, 0.5235987901687622, 0.8726646900177002, 1.5707963705062866, 3.1415927410125732]
	float unkn1_8;//Values:[0.0, 0.0872664675116539, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501, 0.7853981852531433, 0.8726646900177002, 3.1415927410125732]
	float unkn1_9;//Values:[0.0, 1.5707963705062866]
	float unkn1_10;//Values:[0.0, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501, 0.7853981852531433, 3.1415927410125732, 6.2831854820251465]
	float unkn1_11;//Values:[0.0, 0.01745329424738884, 0.0872664675116539, 0.1745329350233078, 0.2617993950843811, 0.7853981852531433, 1.5707963705062866]
	float unkn1_12;//Values:[0.0, 0.01745329424738884, 0.05235988274216652, 0.0872664675116539, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501, 0.8726646900177002, 3.1415927410125732]
	float unkn1_13;//Values:[0.0, 0.10000000149011612, 0.800000011920929, 0.8999999761581421, 1.0, 1.2000000476837158]
	float unkn1_14;//Values:[0.0, 0.20000000298023224, 0.4000000059604645]
	float unkn1_15;//Values:[0.0, 0.10000000149011612, 0.800000011920929, 0.8999999761581421, 1.0, 1.2000000476837158]
	float unkn1_16;//Values:[0.0, 0.20000000298023224, 0.4000000059604645]
	float unkn1_17;//Values:[0.0, 0.10000000149011612, 0.800000011920929, 0.8999999761581421, 1.0, 1.2000000476837158]
	float unkn1_18;//Values:[0.0, 0.20000000298023224, 0.4000000059604645]
	float unkn1_19;//Values:[-0.4000000059604645, -0.25, -0.20000000298023224, -0.18000000715255737, -0.10000000149011612, -0.07000000029802322, -0.05000000074505806, -0.019999999552965164, -0.014999999664723873, -0.009999999776482582] + 21 more
	uint null1_20;//Values:[0]
	float unkn1_21;//Values:[0.0, 0.699999988079071, 0.9399999976158142, 0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9900000095367432, 0.9959999918937683, 0.9990000128746033, 1.0] + 3 more
	uint null1_22;//Values:[0]
	uint unkn1_23;//Values:[3158612902, 3163780284, 3164854026, 3167538381, 3170222735, 3173242634, 3175926989, 3184315597, 3197737370, 3208642560] + 25 more
	uint unkn1_24;//Values:[0, 1017370378]
	float unkn1_25;//Values:[0.0, 0.10000000149011612, 0.6000000238418579, 0.8999999761581421, 0.9399999976158142, 0.949999988079071, 0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9900000095367432] + 4 more
	uint null1_26;//Values:[0]
	float unkn1_27;//Values:[-0.25, -0.22499999403953552, -0.15000000596046448, -0.10000000149011612, -0.07000000029802322, -0.05999999865889549, -0.05000000074505806, -0.02500000037252903, -0.019999999552965164, -0.009999999776482582] + 21 more
	uint null1_28;//Values:[0]
	float unkn1_29;//Values:[0.0, 0.8999999761581421, 0.9399999976158142, 0.949999988079071, 0.9700000286102295, 0.9750000238418579, 0.9800000190734863, 0.9900000095367432, 0.9990000128746033, 0.9998999834060669] + 1 more
	uint null1_30;//Values:[0]
	float unkn1_31;//Values:[-0.5235987901687622, -0.0872664675116539, -0.05235988274216652, -0.03490658849477768, -0.02617994137108326, -0.01745329424738884, -0.00872664712369442, -0.0052359881810843945, -0.0034906587097793818, -0.0026179940905421972] + 33 more
	float unkn1_32;//Values:[0.0, 0.0008726646774448454, 0.0017453293548896909, 0.00436332356184721, 0.0052359881810843945, 0.00872664712369442, 0.01745329424738884, 0.03490658849477768, 0.06981317698955536, 0.1745329350233078]
	float unkn1_33;//Values:[0.0, 0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9850000143051147, 0.9879999756813049, 0.9900000095367432, 0.9950000047683716, 1.0]
	float unkn1_34;//Values:[0.0, 0.009999999776482582, 0.019999999552965164]
	float unkn1_35;//Values:[-0.3490658700466156, -0.27925270795822144, -0.2617993950843811, -0.24434611201286316, -0.20943953096866608, -0.12217305600643158, -0.0872664675116539, -0.06981317698955536, -0.05235988274216652, -0.03490658849477768] + 66 more
	float unkn1_36;//Values:[0.0, 0.0008726646774448454, 0.0017453293548896909, 0.00436332356184721, 0.0052359881810843945, 0.0069813174195587635, 0.00872664712369442, 0.01745329424738884, 0.03490658849477768, 0.06981317698955536] + 2 more
	float unkn1_37;//Values:[0.0, 0.20000000298023224, 0.800000011920929, 0.8999999761581421, 0.9399999976158142, 0.949999988079071, 0.9599999785423279, 0.9649999737739563, 0.9700000286102295, 0.9750000238418579] + 12 more
	float unkn1_38;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164]
	float unkn1_39;//Values:[-0.4363323450088501, -0.13962635397911072, -0.0872664675116539, -0.06981317698955536, -0.056723203510046005, -0.03839724510908127, -0.03490658849477768, -0.01745329424738884, -0.00872664712369442, -0.00436332356184721] + 39 more
	float unkn1_40;//Values:[0.0, 0.0008726646774448454, 0.0017453293548896909, 0.00436332356184721, 0.0052359881810843945, 0.00872664712369442, 0.01745329424738884, 0.03490658849477768, 0.06981317698955536, 0.0872664675116539] + 1 more
	float unkn1_41;//Values:[0.0, 0.699999988079071, 0.8799999952316284, 0.9200000166893005, 0.949999988079071, 0.9559999704360962, 0.9599999785423279, 0.9649999737739563, 0.9700000286102295, 0.9800000190734863] + 8 more
	float unkn1_42;//Values:[0.0, 0.009999999776482582, 0.019999999552965164]
	float unkn1_43;//Values:[-0.029999999329447746, -0.019999999552965164, -0.014999999664723873, -0.007000000216066837, -0.0010000000474974513, -0.0005000000237487257, 0.0, 0.0010000000474974513, 0.0020000000949949026, 0.004000000189989805] + 23 more
	uint null1_44;//Values:[0]
	float unkn1_45;//Values:[0.0, 0.800000011920929, 0.8199999928474426, 0.8500000238418579, 0.8600000143051147, 0.8999999761581421, 0.9200000166893005, 0.9300000071525574, 0.9399999976158142, 0.949999988079071] + 8 more
	uint null1_46;//Values:[0]
	float unkn1_47;//Values:[-0.029999999329447746, -0.019999999552965164, -0.009999999776482582, -0.0010000000474974513, -0.0005000000237487257, 0.0, 0.0010000000474974513, 0.0020000000949949026, 0.003000000026077032, 0.004000000189989805] + 20 more
	uint null1_48;//Values:[0]
	float unkn1_49;//Values:[0.0, 0.800000011920929, 0.8199999928474426, 0.8500000238418579, 0.8999999761581421, 0.9200000166893005, 0.9300000071525574, 0.9399999976158142, 0.949999988079071, 0.9599999785423279] + 9 more
	uint null1_50;//Values:[0]
	float unkn1_51;//Values:[-0.029999999329447746, -0.019999999552965164, -0.007000000216066837, -0.0010000000474974513, -0.0005000000237487257, 0.0, 0.0010000000474974513, 0.0020000000949949026, 0.004000000189989805, 0.004999999888241291] + 19 more
	uint null1_52;//Values:[0]
	float unkn1_53;//Values:[0.0, 0.699999988079071, 0.800000011920929, 0.8199999928474426, 0.8500000238418579, 0.8600000143051147, 0.8999999761581421, 0.9200000166893005, 0.9300000071525574, 0.9399999976158142] + 9 more
	uint null1_54;//Values:[0]

}Transform3DModifier<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[125, 310, 337, 421, 454, 582, 584, 586, 612, 664] + 18 more

	uint frameDelay;//Values:[16, 30, 32, 40, 100, 110, 240]
	uint null1;//Values:[0]

}Transform3DModifierDelayFrame<bgcolor=0x731727>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1011\efd_0004_evc1011_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[5, 17, 43, 55, 87, 95, 97, 115]

	uint unkn1;//Values:[0, 16]
	Color color0;
	Color color1;
	float unkn2_0;//Values:[1.0, 2.0, 2.5, 3.0]
	uint null2_1;//Values:[0]
	uint null2_2;//Values:[0]
	float unkn2_3;//Values:[0.0, 0.8726646900177002]
	float unkn2_4;//Values:[0.0, 0.5235987901687622, 3.1415927410125732]
	float unkn2_5;//Values:[0.05000000074505806, 0.10000000149011612, 0.5, 1.0, 1.2000000476837158, 2.0, 4.0, 18.0]
	float unkn2_6;//Values:[0.0, 0.029999999329447746, 0.05000000074505806, 0.5]
	float unkn2_7;//Values:[200.0, 256.0, 800.0, 2225.0, 3000.0, 6000.0]
	uint null2_8;//Values:[0]
	float unkn2_9;//Values:[256.0, 512.0, 1000.0]
	uint null2_10;//Values:[0]
	float unkn2_11;//Values:[0.0, 1.5]
	uint null2_12;//Values:[0]

}TypeBillboard2D<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(20);

}TypeBillboard2DExpression<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[5, 11, 12, 13, 14, 15, 16, 17, 18, 19] + 2797 more
	uint unkn1;//Values:[0, 1, 2, 3, 4, 16, 18, 20, 32, 33] + 3 more
	Color color0;
	Color color1;
	float unkn2;//Values:[0.0, 0.05000000074505806, 0.05999999865889549, 0.07500000298023224, 0.07999999821186066, 0.10000000149011612, 0.10999999940395355, 0.11999999731779099, 0.125, 0.15000000596046448] + 106 more
	float unkn3;//Values:[0.0, 0.004000000189989805, 0.20000000298023224, 0.5, 0.6000000238418579, 0.699999988079071, 1.0, 1.100000023841858, 1.2000000476837158, 1.25] + 26 more
	float unkn4;//Values:[0.0, 0.5, 1.0, 2.0, 4.0, 4.300000190734863, 8.0, 9.0, 10.0, 20.0] + 4 more
	float unkn5;//Values:[-5.58505392074585, -5.235987663269043, -4.886922359466553, -4.537856101989746, -3.665191411972046, -3.6302850246429443, -3.1415927410125732, -2.96705961227417, -2.8099801540374756, -2.792526960372925] + 139 more
	float unkn6;//Values:[0.0, 0.01745329424738884, 0.03490658849477768, 0.04363323375582695, 0.05235988274216652, 0.0872664675116539, 0.1745329350233078, 0.20943953096866608, 0.2617993950843811, 0.3490658700466156] + 21 more
	float unkn7;//Values:[0.0, 0.0010000000474974513, 0.003000000026077032, 0.004999999888241291, 0.006000000052154064, 0.007000000216066837, 0.009999999776482582, 0.012000000104308128, 0.012500000186264515, 0.013000000268220901] + 197 more
	float unkn8;//Values:[0.0, 0.0010000000474974513, 0.0020000000949949026, 0.0024999999441206455, 0.003000000026077032, 0.004000000189989805, 0.004999999888241291, 0.009999999776482582, 0.013000000268220901, 0.014999999664723873] + 47 more
	float unkn9;//Values:[0.0, 0.009999990463256836, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.07999999821186066, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25] + 47 more
	float unkn10;//Values:[0.0, 0.009999999776482582, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645] + 4 more
	float unkn11;//Values:[0.0, 0.00800000037997961, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896] + 38 more
	float unkn12;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579] + 3 more
	float unkn13;//Values:[-1.0, -0.5, 0.0, 0.009999999776482582, 0.02500000037252903, 0.07500000298023224, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25] + 25 more
	uint unkn14;//Values:[0, 4, 8, 12]
	float unkn15;//Values:[-0.375, -0.3499999940395355, -0.25, -0.20000000298023224, -0.15000000596046448, -0.125, -0.10000000149011612, -0.07500000298023224, -0.05000000074505806, -0.004999999888241291] + 16 more
	float unkn16;//Values:[-0.5, -0.44999998807907104, -0.42500001192092896, -0.4000000059604645, -0.375, -0.3499999940395355, -0.32499998807907104, -0.30000001192092896, -0.25, -0.22499999403953552] + 30 more

}TypeBillboard3D<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[36, 41, 57, 93, 110, 136, 148, 160, 164, 277] + 43 more

	uint unkn1_0;//Values:[1, 4, 16, 64, 65, 80, 1024]
	uint unkn1_1;//Values:[0, 2, 4]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[1, 2, 4]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[0, 1, 2]
	uint unkn1_6;//Values:[2]
	uint unkn1_7;//Values:[0, 1, 2]
	uint unkn1_8;//Values:[1, 2]
	uint unkn1_9;//Values:[2]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[1, 2]
	uint unkn1_12;//Values:[2]
	uint expressionLength;//Values:[28, 44, 88, 104, 124, 140, 172]
	ubyte expression[expressionLength];

}TypeBillboard3DExpression<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(23);

}TypeBillboard3DMaterial<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(24);

}TypeBillboard3DMaterialClip<bgcolor=0xf57685>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(25);

}TypeBillboard3DMaterialExpression<bgcolor=0x3f16f9>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 14, 15, 16, 17, 18, 21, 23, 25, 26] + 402 more
	uint unkn1;//Values:[2, 5, 8, 10, 11, 16, 24, 30, 32, 33] + 33 more
	uint unkn2;//Values:[0, 1, 8, 9, 12, 16, 17, 64, 65]
	uint unkn3;//Values:[2, 3, 6, 7]
	Color color1;
	Color color2;
	float emission;//Values:[0.07500000298023224, 0.15000000596046448, 0.5, 0.75, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0] + 28 more
	float unkn5;//Values:[0.0, 1.0, 1.2000000476837158, 1.5, 2.0, 3.0, 5.0, 7.0, 10.0, 20.0] + 1 more
	float unkn6;//Values:[0.0, 1.5]
	float unkn7;//Values:[-1.3962634801864624, 0.0, 0.5585054159164429, 0.7853981852531433]
	float unkn8;//Values:[0.0, 0.2617993950843811, 0.5235987901687622, 0.7853981852531433, 1.5707963705062866, 1.7453293800354004, 3.1415927410125732, 6.2831854820251465]
	float effectScale;//Values:[0.00800000037997961, 0.009999999776482582, 0.014999999664723873, 0.017999999225139618, 0.019999999552965164, 0.023000000044703484, 0.02500000037252903, 0.029999971389770508, 0.029999999329447746, 0.03500000014901161] + 32 more
	float unkn10;//Values:[0.0, 0.0010000000474974513, 0.001500000013038516, 0.0020000000949949026, 0.004999999888241291, 0.006000000052154064, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903] + 19 more
	float unkn11;//Values:[0.0, 0.5, 0.699999988079071, 0.800000011920929, 1.0, 2.0, 5.0, 10.0]
	
}TypeGpuBillboard<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[106, 314, 2285, 4272, 4860]

	uint unkn1_0;//Values:[0, 1, 17, 32]
	uint unkn1_1;//Values:[2, 4]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[1, 2]
	uint unkn1_6;//Values:[2]
	uint unkn1_7;//Values:[2]
	uint expressionLength;//Values:[0, 28, 44, 88]
	ubyte expression[expressionLength];

}TypeGpuBillboardExpression<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[1607]

	uint unkn1;//Values:[371712]
	Color color0;
	Color color1;
	int unkn2_0;//Values:[-1]
	float unkn2_1;//Values:[80.0]
	uint null2_2;//Values:[0]
	uint null2_3;//Values:[0]
	float unkn2_4;//Values:[1.0]
	uint unkn2_5;//Values:[64]
	uint unkn2_6;//Values:[4]
	uint null2_7;//Values:[0]
	float unkn2_8;//Values:[1.0]
	uint null2_9;//Values:[0]
	float unkn2_10;//Values:[1.0]
	uint null2_11;//Values:[0]
	float unkn2_12;//Values:[1.0]
	float unkn2_13;//Values:[1.0]
	uint null2_14;//Values:[0]
	float unkn2_15;//Values:[1.0]
	uint null2_16;//Values:[0]
	float unkn2_17;//Values:[1.0]
	uint null2_18;//Values:[0]
	float unkn2_19;//Values:[1.0]
	uint null2_20;//Values:[0]
	uint null2_21;//Values:[0]
	uint null2_22;//Values:[0]
	uint null2_23;//Values:[0]
	uint null2_24;//Values:[0]
	uint null2_25;//Values:[0]
	uint null2_26;//Values:[0]
	uint null2_27;//Values:[0]
	float unkn2_28;//Values:[1.600000023841858]
	uint null2_29;//Values:[0]
	uint null2_30;//Values:[0]
	float unkn2_31;//Values:[0.019999999552965164]
	float unkn2_32;//Values:[0.9800000190734863]
	uint null2_33;//Values:[0]
	float unkn2_34;//Values:[0.800000011920929]
	float unkn2_35;//Values:[1.0]
	float unkn2_36;//Values:[8.0]
	uint unkn2_37;//Values:[10]
	uint unkn2_38;//Values:[6]
	float unkn2_39;//Values:[30.0]
	float unkn2_40;//Values:[60.0]
	uint unkn2_41;//Values:[6]
	float unkn2_42;//Values:[10.0]
	float unkn2_43;//Values:[10.0]
	float unkn2_44;//Values:[10.0]
	float unkn2_45;//Values:[10.0]
	float unkn2_46;//Values:[10.0]
	float unkn2_47;//Values:[10.0]
	uint unkn2_48;//Values:[1]
	uint unkn2_49;//Values:[64]
	uint null2_50;//Values:[0]
	uint null2_51;//Values:[0]
	uint null2_52;//Values:[0]
	uint null2_53;//Values:[0]
	uint unkn2_54;//Values:[2]
	float unkn2_55;//Values:[8.0]
	float unkn2_56;//Values:[8.0]
	float unkn2_57;//Values:[8.0]
	float unkn2_58;//Values:[8.0]
	float unkn2_59;//Values:[8.0]
	float unkn2_60;//Values:[8.0]
	uint unkn2_61;//Values:[1]
	uint unkn2_62;//Values:[64]
	uint null2_63;//Values:[0]
	uint null2_64;//Values:[0]
	uint null2_65;//Values:[0]
	uint null2_66;//Values:[0]
	uint unkn2_67;//Values:[2]
	float unkn2_68;//Values:[0.5]
	float unkn2_69;//Values:[1.0]
	float unkn2_70;//Values:[0.5]
	float unkn2_71;//Values:[1.0]
	float unkn2_72;//Values:[0.5]
	float unkn2_73;//Values:[1.0]
	uint null2_74;//Values:[0]
	uint null2_75;//Values:[0]
	uint null2_76;//Values:[0]
	uint null2_77;//Values:[0]
	uint null2_78;//Values:[0]
	uint null2_79;//Values:[0]
	uint unkn2_80;//Values:[2]
	uint unkn2_81;//Values:[1]
	uint unkn2_82;//Values:[1]
	uint unkn2_83;//Values:[1]
	uint null2_84;//Values:[0]
	ushort unkn3;
}TypeGpuLightning3D<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1016\efd_0004_evc1016_01_0001.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(176);

}TypeGpuMesh<bgcolor=0x2a6866>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(177);

}TypeGpuMeshExpression<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(178);

}TypeGpuMeshTrail<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(179);

}TypeGpuMeshTrailClip<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(180);

}TypeGpuMeshTrailExpression<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 45, 49, 57, 59, 69, 90, 96, 101, 148] + 63 more

	uint unkn1;//Values:[15, 20, 30, 32, 50, 64, 72, 74, 128, 256] + 3 more
	uint unkn2;//Values:[0, 3, 4, 16, 20]
	uint unkn3;//Values:[3, 7]
	Color color0;
	Color color1;
	float unkn4_0;//Values:[0.75, 1.0, 2.0, 3.0, 5.0, 10.0, 15.0, 20.0, 100.0]
	float unkn4_1;//Values:[0.0, 1.0, 3.0, 10.0]
	float unkn4_2;//Values:[0.0, 3.0]
	uint null4_3;//Values:[0]
	float unkn4_4;//Values:[0.0, 1.5707963705062866, 3.1415927410125732]
	uint null4_5;//Values:[0]
	float unkn4_6;//Values:[0.0, 1.5707963705062866, 3.1415927410125732]
	uint null4_7;//Values:[0]
	float unkn4_8;//Values:[0.0, 1.5707963705062866, 3.1415927410125732]
	float unkn4_9;//Values:[0.009999999776482582, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07500000298023224, 0.07999999821186066, 0.10000000149011612, 0.15000000596046448] + 7 more
	float unkn4_10;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224]
	float unkn4_11;//Values:[0.5, 1.0]
	float unkn4_12;//Values:[0.0, 0.20000000298023224, 0.30000001192092896]
	float unkn4_13;//Values:[1.0, 1.2000000476837158, 2.0]
	float unkn4_14;//Values:[0.0, 0.20000000298023224, 0.30000001192092896, 0.5]
	float unkn4_15;//Values:[0.0, 0.30000001192092896, 1.0, 1.5, 2.0]

}TypeGpuPolygon<bgcolor=0x363669>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1003\efd_0004_evc1003_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[14, 25, 26, 28, 35, 53, 64, 67, 80, 91] + 45 more

	uint unkn1_0;//Values:[0, 1, 4, 10, 32]
	uint unkn1_1;//Values:[2, 3, 6, 7]
	uint unkn1_2;//Values:[1, 5, 20, 32, 64, 100, 128, 192, 256, 512]
	uint unkn1_3;//Values:[1, 2, 3, 10]
	uint unkn1_4;//Values:[2, 3, 4, 11]
	Color color0;
	Color color1;
	float unkn2_0;//Values:[0.699999988079071, 1.0, 1.5, 2.0, 5.0, 15.0, 20.0, 25.0, 30.0, 35.0] + 6 more
	float unkn2_1;//Values:[0.0, 5.0]
	uint null2_2;//Values:[0]
	float unkn2_3;//Values:[0.0, 0.699999988079071, 0.800000011920929, 1.0]
	float unkn2_4;//Values:[0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02070000022649765, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322] + 6 more
	float unkn2_5;//Values:[0.0, 0.001500000013038516, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896] + 1 more
	float unkn2_6;//Values:[0.0, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.15000000596046448, 0.30000001192092896, 0.5, 0.6000000238418579, 1.25, 1.5] + 3 more
	float unkn2_7;//Values:[0.0, 0.0010000000474974513, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5] + 2 more
}TypeGpuRibbonFollow<bgcolor=0x4081ec>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_10_0001.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[38, 73, 75, 160, 200, 617, 666, 676, 694, 701] + 10 more

	uint unkn1;//Values:[0, 512, 516, 544, 576, 640, 704]
	uint unkn2;//Values:[3, 7]
	Color color0;
	Color color1;
	float unkn3_0;//Values:[1.0, 2.0, 6.0, 50.0, 150.0, 200.0]
	float unkn3_1;//Values:[0.0, 1.0]
	uint null3_2;//Values:[0]
	float unkn3_3;//Values:[0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.07999999821186066, 0.10000000149011612, 0.11999999731779099, 0.12999999523162842, 0.15000000596046448, 0.30000001192092896]
	float unkn3_4;//Values:[0.0, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.15000000596046448]
	float unkn3_5;//Values:[0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 1.0]
	float unkn3_6;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.5]
	float unkn3_7;//Values:[1.0]
	float unkn3_8;//Values:[0.0, 1.0]
	uint unkn3_9;//Values:[32, 40, 64, 128, 256, 360, 512]
	float unkn3_10;//Values:[2.0, 2.5, 2.5999999046325684, 3.0, 3.5, 4.0, 5.0, 6.0, 10.0]
	float unkn3_11;//Values:[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 4.0]
	uint unkn3_12;//Values:[1, 2]
	float unkn3_13;//Values:[0.5]
	float unkn3_14;//Values:[1.0]
	uint null3_15;//Values:[0]
	uint null3_16;//Values:[0]
	float unkn3_17;//Values:[0.0, 1.0]
	uint null3_18;//Values:[0]
	float unkn3_19;//Values:[0.0, 1.0]
	uint null3_20;//Values:[0]
}TypeGpuRibbonLength<bgcolor=0x7a5736>;//Example: natives\NSW\vfx\editor\efd_ot\efd_ninken\efd_0004_ninken_00_0090.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[13, 14, 22, 26, 28, 33, 39, 43, 46, 50] + 368 more
	uint unkn1;//Values:[606336, 606592, 607616, 770176, 8388736, 8390016, 8407424, 8438144, 8470656, 8470912] + 26 more
	Color color0;
	Color color1;
	float unkn2_0;//Values:[1.0, 2.0, 3.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 40.0] + 14 more
	float unkn2_1;//Values:[0.0, 1.0, 20.0, 30.0, 50.0, 80.0]
	float unkn2_2;//Values:[0.0, 15.0, 20.0, 30.0, 50.0]
	float unkn2_3;//Values:[0.0, 0.800000011920929, 1.0]
	float unkn2_4;//Values:[0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929, 1.0, 1.2000000476837158] + 19 more
	float unkn2_5;//Values:[0.0, 0.09999847412109375, 0.09999999403953552, 0.10000002384185791, 0.10000038146972656, 0.19999998807907104, 0.20000004768371582, 0.25, 0.2999999523162842, 0.3000001907348633] + 7 more
	float unkn2_6;//Values:[0.0, 1.0, 2.0]
	float unkn2_7;//Values:[0.0, 1.0, 60.0]
	float unkn2_8;//Values:[60.0, 100.0, 120.0, 140.0, 150.0, 160.0, 170.0, 180.0, 183.0, 186.0] + 9 more
	float unkn2_9;//Values:[0.0, 20.0, 27.0, 30.0, 40.0, 47.0, 60.0]
	uint unkn2_10;//Values:[5, 6, 7, 8, 9, 10, 11, 12, 16, 17] + 5 more
	uint unkn2_11;//Values:[2, 3, 4, 5, 6, 8, 9, 10]
	uint unkn2_12;//Values:[2, 3, 4, 5, 6, 8, 9, 10]
	float unkn2_13;//Values:[0.0, 1.401298464324817e-45, 2.802596928649634e-45, 0.20000000298023224, 0.30000001192092896, 0.5, 0.6000000238418579, 0.800000011920929, 1.0]
	float unkn2_14;//Values:[0.0, 1.401298464324817e-45, 2.802596928649634e-45, 0.04999999701976776, 0.05000000074505806, 0.09999990463256836, 0.10000002384185791, 0.19999998807907104, 0.20000000298023224, 0.20000004768371582] + 3 more
	float unkn2_15;//Values:[0.0, 0.05000000074505806, 0.09999990463256836, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.800000011920929, 0.8999999761581421] + 4 more
	float unkn2_16;//Values:[0.0, 0.020000003278255463, 0.024999618530273438, 0.02499999850988388, 0.02500152587890625, 0.04999999701976776, 0.05000000074505806, 0.09999847412109375, 0.09999990463256836, 0.09999998658895493] + 13 more
	float unkn2_17;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 2.0, 4.0, 5.0]
	float unkn2_18;//Values:[0.0, 0.020000003278255463, 0.024999618530273438, 0.02499999850988388, 0.04999999701976776, 0.05000000074505806, 0.09999845921993256, 0.09999990463256836, 0.09999998658895493, 0.09999999403953552] + 9 more
	float unkn2_19;//Values:[0.0, 0.09999990463256836, 0.10000000149011612, 0.19999980926513672, 0.20000000298023224, 1.0]
	float unkn2_20;//Values:[0.0, 0.09999999403953552, 0.10000000894069672, 0.10000002384185791, 1.0, 16.0]
	float unkn2_21;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.20000004768371582, 0.30000001192092896, 0.4000000059604645, 1.0]
	float unkn2_22;//Values:[0.0, 0.020000003278255463, 0.10000000894069672]
	float unkn2_23;//Values:[0.0, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.20000004768371582, 0.30000001192092896, 0.4000000059604645, 0.5, 1.0]
	float unkn2_24;//Values:[0.0, 0.020000003278255463, 0.10000000894069672]
	float unkn2_25;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 1.0]
	float unkn2_26;//Values:[0.0, 1.0]
	float unkn2_27;//Values:[0.0, 0.5]
	float unkn2_28;//Values:[0.0, 0.20000000298023224, 0.25, 0.5]
	float unkn2_29;//Values:[-120.0, 0.0, 120.0, 180.0]
	float unkn2_30;//Values:[0.0, 30.0, 180.0]
	float unkn2_31;//Values:[0.0, 0.10000000149011612, 0.4000000059604645, 1.0, 1.2000000476837158, 1.5, 2.0]
	float unkn2_32;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 1.0]
	float unkn2_33;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 1.0, 1.5] + 2 more
	float unkn2_34;//Values:[0.0, 0.09999999403953552, 0.10000002384185791, 0.20000004768371582, 1.0]
	float unkn2_35;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.2999999523162842, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929] + 4 more
	float unkn2_36;//Values:[0.0, 0.09999999403953552, 0.10000002384185791, 0.20000004768371582, 0.2999998927116394, 0.2999999523162842, 1.0]
	float unkn2_37;//Values:[0.0, 0.10000000149011612, 0.19999980926513672, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.75] + 5 more
	float unkn2_38;//Values:[0.0, 0.10000002384185791, 0.20000004768371582, 0.5, 1.0]
	float unkn2_39;//Values:[0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0.46000000834465027, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929, 1.0, 1.1999998092651367] + 11 more
	float unkn2_40;//Values:[0.0, 0.09999990463256836, 0.10000002384185791, 0.10000038146972656, 0.2999999523162842, 0.3999999761581421, 0.4999999403953552, 0.5, 1.0, 2.0] + 3 more
	float unkn2_41;//Values:[-5.0, -4.0, -3.0, 0.0, 0.3499999940395355, 0.5, 1.0, 1.2000000476837158, 2.0]
	float unkn2_42;//Values:[-1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 8.0, 10.0, 20.0] + 1 more
	float unkn2_43;//Values:[-20.0, -10.0, -5.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0, 3.0] + 2 more
	float unkn2_44;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.050000011920928955, 0.07000000029802322, 0.10000000149011612, 0.11999999731779099] + 3 more
	float unkn2_45;//Values:[0.0, 0.009999999776482582, 0.05000000074505806, 0.10000000149011612, 0.30000001192092896]
	float unkn2_46;//Values:[0.8999999761581421, 0.9300000071525574, 0.9599999785423279, 0.9800000190734863, 1.0]
	float unkn2_47;//Values:[0.0, 0.009999990463256836]
	uint unkn2_48;//Values:[0, 2]
	uint null2_49;//Values:[0]
	float unkn2_50;//Values:[0.0, 15.0, 40.0, 90.0, 150.0, 180.0]
	float unkn2_51;//Values:[0.0, 93.0]
	float unkn2_52;//Values:[0.0, 150.0, 180.0]
	float unkn2_53;//Values:[-93.0, 0.0, 90.0]
	float unkn2_54;//Values:[0.0, 15.0, 40.0, 150.0, 180.0]
	float unkn2_55;//Values:[0.0, 0.12999999523162842, 0.20000000298023224, 0.2199999988079071, 0.23999999463558197, 0.25, 0.3100000023841858, 0.3199999928474426, 0.3400000035762787, 0.4000000059604645] + 8 more
	float unkn2_56;//Values:[1.0, 4.599999904632568, 5.329999923706055, 10.0]
	float unkn2_57;//Values:[1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0]
	float unkn2_58;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 1.5, 1.7999999523162842, 2.0, 3.0] + 3 more
	float unkn2_59;//Values:[0.0, 0.019999999552965164, 0.10000000149011612, 0.20000000298023224, 0.4000000059604645, 0.5, 0.6000000238418579, 1.0, 1.0999999046325684, 1.5] + 10 more
	float unkn2_60;//Values:[-1.0, -0.4000000059604645, -0.20000000298023224, -0.10000000149011612, 0.0, 0.5, 1.0, 1.5, 1.7999999523162842, 2.0] + 2 more
	float unkn2_61;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.5, 1.0, 1.0999999046325684, 1.5, 1.7999999523162842, 2.0, 3.0] + 4 more
	float unkn2_62;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 1.5, 1.7999999523162842, 2.0, 3.0] + 3 more
	float unkn2_63;//Values:[0.0, 0.019999999552965164, 0.10000000149011612, 0.20000000298023224, 0.4000000059604645, 0.5, 0.6000000238418579, 1.0, 1.0999999046325684, 1.5] + 10 more
	uint unkn2_64;//Values:[0, 1, 2]
	uint unkn2_65;//Values:[0, 1, 3, 5, 6, 8]
	uint null2_66;//Values:[0]
	float unkn2_67;//Values:[0.0, 1.5707963705062866]
	float unkn2_68;//Values:[0.0, 0.01745329424738884]
	float unkn2_69;//Values:[0.0, 1.5707963705062866]
	uint unkn2_70;//Values:[2]
	float unkn2_71;//Values:[0.800000011920929, 0.949999988079071, 1.0]
	float unkn2_72;//Values:[1.0]
	uint boneNameLength;//Values:[2, 16, 20, 22]
	wstring boneName;//Values:[22]

}TypeLightning3D<bgcolor=0x2f158b>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_20_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[902, 998, 1032, 2082, 2175, 2177, 2248, 2604, 2765, 3223] + 13 more

	uint unkn1_0;//Values:[1, 64, 33554432, 33562624, 33595392]
	uint unkn1_1;//Values:[0, 2, 4]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[2]
	uint unkn1_6;//Values:[2, 4]
	uint unkn1_7;//Values:[2, 4]
	uint unkn1_8;//Values:[2]
	uint unkn1_9;//Values:[2]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[2]
	uint unkn1_12;//Values:[2]
	uint unkn1_13;//Values:[2]
	uint unkn1_14;//Values:[2]
	uint unkn1_15;//Values:[2]
	uint unkn1_16;//Values:[2]
	uint unkn1_17;//Values:[2]
	uint unkn1_18;//Values:[2]
	uint unkn1_19;//Values:[2]
	uint unkn1_20;//Values:[2]
	uint unkn1_21;//Values:[2]
	uint unkn1_22;//Values:[2]
	uint unkn1_23;//Values:[2]
	uint unkn1_24;//Values:[2]
	uint unkn1_25;//Values:[2]
	uint unkn1_26;//Values:[0, 2]
	uint unkn1_27;//Values:[2]
	uint unkn1_28;//Values:[2]
	uint unkn1_29;//Values:[2]
	uint expressionLength;//Values:[28, 44, 56, 116, 132]
	ubyte expression[expressionLength];

}TypeLightning3DExpression<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(105);

}TypeLightning3DMaterial<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 16, 17, 18, 21, 22] + 1658 more
	uint unkn1;//Values:[0, 1, 2, 8, 9, 14, 32, 40, 64, 72] + 24 more
	Color color0;
	Color color1;
	float unkn4;//Values:[1.0, 2.0, 2.5, 3.0, 30.0, 50.0, 58.0, 65.83999633789062, 100.0, 255.0]
	Color color2;
	float unkn6;//Values:[1.0]
	uint unkn7;//Values:[0, 1, 2, 3, 4, 5, 8, 18]
	uint unkn8;//Values:[0, 1, 2, 3, 4, 5, 6, 7]
	uint unkn9;//Values:[1, 2, 3, 4, 5, 6, 7, 8]
	floatXYZ unkn10;					  
	uint null11;//Values:[0]
	uint unkn12;//Values:[0, 1, 2]
	uint unkn13;//Values:[0, 1]
	uint unkn14;//Values:[0, 1, 2, 3, 4, 5]
	float rotationX;//Values:[-1.919862151145935, -1.6580629348754883, -1.6057029962539673, -1.5707963705062866, -1.483529806137085, -1.1344640254974365, -0.7504916191101074, -0.7330383062362671, -0.6632251143455505, -0.6108652949333191] + 53 more
	float rotationXRandom;//Values:[0.0, 0.03490658849477768, 0.05235988274216652, 0.0872664675116539, 0.10471976548433304, 0.12217305600643158, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501] + 12 more
	float rotationY;//Values:[-53.2325439453125, -3.490658760070801, -2.96705961227417, -2.6179938316345215, -2.5481808185577393, -2.268928050994873, -2.094395160675049, -1.919862151145935, -1.7453293800354004, -1.72787606716156] + 60 more
	float rotationYRandom;//Values:[0.0, 0.03490658849477768, 0.05235988274216652, 0.0872664675116539, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501, 0.5235987901687622, 0.6108652949333191] + 11 more
	float rotationZ;//Values:[-3.1415927410125732, -2.0245821475982666, -1.7453293800354004, -1.5707963705062866, -1.0471975803375244, -0.8726646900177002, -0.7853981852531433, -0.5235987901687622, -0.45378562808036804, -0.4363323450088501] + 41 more
	float rotationRandom;//Values:[0.0, 0.03490658849477768, 0.05235988274216652, 0.0872664675116539, 0.10471976548433304, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501, 0.5235987901687622] + 9 more
	float scaleX;//Values:[-1.7999999523162842, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.23000000417232513, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.42500001192092896, 0.44999998807907104] + 53 more
	float scaleXRandom;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.699999988079071, 1.0]
	float scaleY;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.5249999761581421, 0.550000011920929, 0.6000000238418579] + 58 more
	float scaleYRandom;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579] + 5 more
	float scaleZ;//Values:[-1.7999999523162842, 0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.23000000417232513, 0.25, 0.30000001192092896, 0.32499998807907104, 0.3499999940395355] + 62 more
	float scaleZRandom;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.699999988079071, 1.0] + 1 more
	float overallScale;//Values:[0.0, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02199999988079071, 0.024000000208616257, 0.02500000037252903, 0.026000000536441803, 0.029999999329447746, 0.03500000014901161] + 143 more
	float overallScaleRandom;//Values:[0.0, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806] + 31 more
	uint unkn23;//Values:[0, 1, 2]
	uint unkn24;//Values:[32, 48, 64, 80, 96, 112, 128, 144, 160, 176] + 3 more
	uint texCount;//Values:[0, 1, 2, 3]
	uint meshPathLength;//Values:[64, 68, 74, 82, 88, 90, 92, 94, 96, 100] + 8 more
	wstring meshPath;//Values:[100] + 130 more
	uint unknPathLength;//Values:[2]
	wstring unknPath;//Values:[2]
	uint mdfPathLength;//Values:[64, 68, 74, 80, 88, 90, 92, 94, 96, 100] + 11 more
	wstring mdfPath;//Values:[100] + 91 more
	if (texCount != 0)
	{
		struct
		{
			int offset;
			float mdfProperty[offset/4];
		}mdfProperties<optimize=false>;
	   
	}
	uint texPathLength;//Values:[0, 32, 64, 72, 74, 76, 78, 80, 82, 88] + 26 more
	if (texCount != 0)
	{
		struct
		{
			wstring path;
		}TexPath[texCount]<optimize = false>;
	}
	else
	{
		uint hash;//Should correspond to a property in the mdf
		if (texPathLength != 0)
		{
			struct
			{
				uint substructValue[texPathLength/4];
			}substruct;
		}
		
	}
}TypeMesh<bgcolor=0x02b72e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[16, 18, 24, 25, 36, 45, 53, 61, 65, 68] + 309 more
	uint null1;//Values:[0]
	uint unkn2;//Values:[2, 3, 4, 5, 6, 7, 8, 12]
	int unkn3;//Values:[-1, 2]
	float unkn4;//Values:[3.0, 5.0, 7.0, 8.0, 9.0, 10.0, 12.0, 13.0, 14.0, 15.0] + 42 more
	uint substruct1Count;//Values:[1, 2, 3, 4, 6]
	uint substruct2Count;//Values:[2, 3, 4, 5, 6, 7, 8, 9, 12, 16] + 1 more
	uint substruct3Count;//Values:[0, 1, 2]
	uint substruct1Length;//Values:[8, 16, 24, 32, 48]
	uint substruct2Length;//Values:[24, 36, 48, 60, 72, 84, 96, 108, 144, 192] + 1 more
	uint substruct3Length;//Values:[0, 16, 32]
	uint indicesCount;//Values:[1, 2, 3]
	if (substruct1Count != 0)
	{
		struct
		{
			uint unkn0;
			uint null1;//Values:[0]
		}substruct1[substruct1Count];
	}
	if (substruct2Count != 0)
	{
		struct
		{
			float unkn0;
			uint null1;//Values:[0]
			uint unkn2;//Values:[2, 3, 4, 5, 6, 7, 8, 12]
		}substruct2[substruct2Count];//Can be either floats or ints
	}
	if (substruct3Count != 0)
	{
		struct
		{
			float unkn0;
			uint null1;//Values:[0]
			uint unkn2;//Values:[2, 3, 4, 5, 6, 7, 8, 12]
			int unkn3;//Values:[-1, 2]
		}substruct3[substruct3Count];
	}
	if (substruct1Count != 0)
	{
		struct
		{
			uint hash;
			uint null1;//Values:[0]
			uint unkn2;//Values:[2, 3, 4, 5, 6, 7, 8, 12]
			int unkn3;//Values:[-1, 2]
		}substruct4[substruct1Count];
	}
	uint indices[indicesCount];

}TypeMeshClip<bgcolor=0xf57685>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct//This typedef struct works for some files but fails on others
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 27, 31, 47, 83, 112, 118, 164, 168, 179] + 79 more
	uint substructCount;//Values:[0, 1, 2, 3, 4, 6, 10, 11]
	uint substructLength;//Values:[0, 44, 60, 88, 104, 120, 132, 136, 140, 164] + 10 more
	uint indicesCount;//Values:[0, 1, 2, 3, 4]
	uint unkn4;//Values:[0, 1, 5, 32768, 2131968]
	uint unkn5_0;//Values:[0, 2, 4]
	uint unkn5_1;//Values:[2]
	uint unkn5_2;//Values:[2, 4]
	uint unkn5_3;//Values:[2]
	uint unkn5_4;//Values:[1, 2]
	uint unkn5_5;//Values:[2]
	uint unkn5_6;//Values:[2]
	uint unkn5_7;//Values:[2]
	uint unkn5_8;//Values:[2]
	uint unkn5_9;//Values:[2, 4]
	uint unkn5_10;//Values:[2]
	uint unkn5_11;//Values:[0, 1, 2, 4]
	uint unkn5_12;//Values:[0, 2]
	uint unkn5_13;//Values:[2]
	uint unkn5_14;//Values:[2]
	uint unkn5_15;//Values:[0, 2]
	uint unkn5_16;//Values:[2]
	uint unkn5_17;//Values:[2]
	uint unkn5_18;//Values:[2]
	uint unkn5_19;//Values:[0, 2]
	uint unkn5_20;//Values:[2]
	uint unkn5_21;//Values:[0, 2]
	uint unkn5_22;//Values:[2]
	uint expressionLength;//Values:[0, 28, 44, 56, 132]
	if (expressionLength != 0)
	ubyte expression[expressionLength];
	if (substructCount != 0)
	{
		struct
		{
			uint unkn0[substructLength/4];
		}substruct<optimize=false>;
	}
	if (indicesCount != 0)
	{
		uint indices[indicesCount];
	}
	
}TypeMeshExpression<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(209);

}TypeModularBillboard<bgcolor=0x3a2006>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 17, 20, 21, 22, 23] + 296 more

	uint null1_0;//Values:[0]
	int unkn1_1;//Values:[-2013286534, -1711296646, -1241541280, -16776961, -16769076, -16769031, -16766209, -16763905, -16759553, -16756516] + 76 more
	int unkn1_2;//Values:[-16113227, -1]
	uint unkn1_3;//Values:[1, 2]
	uint null1_4;//Values:[0]
	uint null1_5;//Values:[0]
	uint null1_6;//Values:[0]
	float unkn1_7;//Values:[0.0, 3.1415927410125732]
	uint null1_8;//Values:[0]
	uint null1_9;//Values:[0]
	float unkn1_10;//Values:[0.10000000149011612, 1.0, 10.0, 15.0, 30.0]
	uint null1_11;//Values:[0]
	float unkn1_12;//Values:[0.5, 1.0, 5.0, 50.0]
	uint null1_13;//Values:[0]
	float unkn1_14;//Values:[1.0, 10.0, 30.0, 100.0]
	uint null1_15;//Values:[0]

}TypeNoDraw<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(65);

}TypeNoDrawExpression<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[13, 23, 25, 29, 35, 37, 44, 45, 48, 52] + 535 more
	uint unkn1_0;//Values:[0, 2, 4, 6, 16, 18, 20, 22, 32, 34] + 40 more
	uint unkn1_1;//Values:[0, 2, 3, 4]
	uint unkn1_2;//Values:[0, 1]
	uint unkn1_3;//Values:[5, 8, 10, 12, 15, 16, 20, 24, 30, 32] + 15 more
	float unkn1_4;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 1.0, 2.0, 3.0, 4.0, 7.0, 10.0] + 7 more
	float unkn1_5;//Values:[0.0, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896, 0.3499999940395355, 0.5, 0.699999988079071, 1.0, 1.5, 2.0] + 14 more
	float unkn1_6;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.3499999940395355, 0.5, 0.6000000238418579, 1.0, 5.0] + 10 more
	float unkn1_7;//Values:[0.05000000074505806, 0.10000000149011612, 0.14000000059604645, 0.15000000596046448, 0.20000000298023224, 0.25, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071] + 37 more
	float unkn1_8;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.14000000059604645, 0.15000000596046448, 0.20000000298023224, 0.25, 0.4000000059604645, 0.5, 0.550000011920929] + 32 more
	float unkn1_9;//Values:[0.05000000074505806, 0.10000000149011612, 0.14000000059604645, 0.15000000596046448, 0.20000000298023224, 0.25, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071] + 33 more
	int unkn1_10;//Values:[0, 255, 2559, 3583, 5631, 11007, 27391, 35583, 39423, 208127] + 186 more
	int unkn1_11;//Values:[-16777216, -15660749, -1846904, -1336490, -568577, -34836, -1]
	float unkn1_12;//Values:[0.0, 1.0, 1.5, 2.0, 5.0, 10.0, 15.0, 20.0, 30.0, 40.0] + 10 more
	float unkn1_13;//Values:[0.0, 1.0, 2.0, 3.0, 5.0, 10.0, 70.0, 100.0]
	float unkn1_14;//Values:[0.0, 2.0, 3.0, 5.0, 20.0, 30.0, 60.0]
	float unkn1_15;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.5, 0.800000011920929, 1.0, 1.100000023841858] + 24 more
	float unkn1_16;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.11999999731779099, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.699999988079071, 0.800000011920929] + 35 more
	float unkn1_17;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.4000000059604645, 0.5, 0.6000000238418579, 1.0, 1.100000023841858, 1.5] + 26 more
	float unkn1_18;//Values:[0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.3499999940395355, 0.5, 0.6000000238418579, 0.699999988079071] + 46 more
	float unkn1_19;//Values:[0.0, 0.10000000149011612, 0.14000000059604645, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.5, 0.6000000238418579, 0.75, 0.800000011920929] + 41 more
	float unkn1_20;//Values:[0.05000000074505806, 0.15000000596046448, 0.30000001192092896, 0.3499999940395355, 0.5, 0.6000000238418579, 0.800000011920929, 1.0, 1.100000023841858, 1.2000000476837158] + 46 more
	Color unkn1_21;//Values:[] + 178 more
	int unkn1_22;//Values:[-16777216, -16186843, -8032952, -4486573, -568577, -30481, -1]
	float unkn1_23;//Values:[1.0, 1.5, 2.0, 3.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0] + 16 more
	float unkn1_24;//Values:[0.0, 1.0, 1.2000000476837158, 2.0, 3.0, 5.0, 6.0, 10.0, 70.0, 100.0]
	float unkn1_25;//Values:[0.0, 2.0, 3.0, 30.0, 50.0, 60.0]
	float unkn1_26;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.800000011920929, 1.0] + 25 more
	float unkn1_27;//Values:[0.0, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.75] + 36 more
	float unkn1_28;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.3499999940395355, 0.5, 0.699999988079071, 0.8999999761581421, 1.0] + 33 more
	float unkn1_29;//Values:[0.05000000074505806, 0.10000000149011612, 0.1599999964237213, 0.20000000298023224, 0.5, 0.699999988079071, 0.7999999523162842, 0.8999999761581421, 1.0, 1.2000000476837158] + 61 more
	float unkn1_30;//Values:[0.0, 0.10000000149011612, 0.14000000059604645, 0.20000000298023224, 0.30000001192092896, 0.5, 0.6000000238418579, 0.800000011920929, 0.8999999761581421, 1.0] + 52 more
	float unkn1_31;//Values:[0.05000000074505806, 0.1599999964237213, 0.20000000298023224, 0.30000001192092896, 0.5, 0.800000011920929, 0.8999999761581421, 1.0, 1.2000000476837158, 1.25] + 57 more
	Color unkn1_32;//Values:[] + 171 more
	int unkn1_33;//Values:[-16777216, -16186843, -6913446, -943794, -568577, -27663, -1]
	float unkn1_34;//Values:[1.0, 1.5, 2.0, 3.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0] + 14 more
	float unkn1_35;//Values:[0.0, 1.0, 1.2000000476837158, 2.0, 3.0, 5.0, 10.0, 30.0, 70.0, 100.0]
	float unkn1_36;//Values:[0.0, 2.0, 3.0, 8.0, 30.0, 60.0]
	float unkn1_37;//Values:[0.0, 0.20000000298023224, 0.5, 1.0, 3.0, 5.0, 10.0, 60.0, 90.0, 200.0] + 16 more
	float unkn1_38;//Values:[0.0, 0.05000000074505806, 0.10000002384185791, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896, 0.5, 0.6000000238418579, 0.6499999761581421, 0.699999988079071] + 45 more
	float unkn1_39;//Values:[0.0, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 1.2000000476837158, 1.5, 1.600000023841858] + 30 more
	float unkn1_40;//Values:[0.05000000074505806, 0.17000000178813934, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929, 0.8999999761581421, 1.0] + 61 more
	float unkn1_41;//Values:[0.0, 0.05000000074505806, 0.10000000149011612, 0.14000000059604645, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.8999999761581421] + 62 more
	float unkn1_42;//Values:[0.05000000074505806, 0.17000000178813934, 0.30000001192092896, 0.5, 0.6000000238418579, 0.699999988079071, 1.0, 1.100000023841858, 1.2000000476837158, 1.2999999523162842] + 59 more
	int unkn1_43;//Values:[0, 91, 204, 255, 1279, 2406, 2559, 3583, 4351, 4454] + 172 more
	int unkn1_44;//Values:[-16777216, -16186843, -3899322, -568577, -39958, -1, 13597006, 16208639]
	float unkn1_45;//Values:[0.0, 0.5, 1.0, 1.5, 2.0, 5.0, 8.0, 10.0, 15.0, 20.0] + 14 more
	float unkn1_46;//Values:[0.0, 1.0, 1.2000000476837158, 2.0, 3.0, 5.0, 6.0, 10.0, 70.0, 100.0]
	float unkn1_47;//Values:[0.0, 2.0, 3.0, 30.0, 60.0]
	uint null1_48;//Values:[0]
	float unkn1_49;//Values:[0.0, 1.0471975803375244, 3.1415927410125732, 6.2831854820251465, 31.41592788696289]
	float unkn1_50;//Values:[0.007000000216066837, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03500000014901161, 0.03999999910593033, 0.04500000178813934, 0.05000000074505806] + 30 more
	float unkn1_51;//Values:[0.0, 0.003000000026077032, 0.004000000189989805, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03500000014901161] + 12 more
	uint unkn1_52;//Values:[0, 1]
	float unkn1_53;//Values:[0.0, 0.009999999776482582, 0.05000000074505806, 0.07000000029802322, 0.09999990463256836, 0.10000000149011612, 0.10000002384185791, 0.11999999731779099, 0.14000000059604645, 0.15000000596046448] + 19 more
	float unkn1_54;//Values:[0.0, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896] + 6 more
	float unkn1_55;//Values:[0.029999999329447746, 0.05000000074505806, 0.05999999865889549, 0.07999999821186066, 0.10000000149011612, 0.10999999940395355, 0.11999999731779099, 0.15000000596046448, 0.20000000298023224, 0.2199999988079071] + 28 more
	float unkn1_56;//Values:[0.0, 0.009999999776482582, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.10000000149011612, 0.15000000596046448] + 17 more
	uint unkn1_57;//Values:[0, 1, 4, 5, 10, 15, 20, 30, 32, 40] + 3 more
	uint unkn1_58;//Values:[0, 1, 5, 10, 20, 30, 32, 40, 50, 60] + 6 more
	uint unkn1_59;//Values:[0, 1, 2, 10]
	uint unkn1_60;//Values:[1, 2, 3, 11]
	float unkn1_61;//Values:[0.0, 0.5, 0.800000011920929, 1.0, 2.0, 3.0, 5.0]
	

}TypeNodeBillboard<bgcolor=0x5eac94>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[33, 132, 206, 1937, 2129, 2139, 2425, 2427, 2499, 2758] + 3 more

	uint unkn1_0;//Values:[0, 67372036, 117901063, 1077952576, 3233857728]
	uint unkn1_1;//Values:[0, 64]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[2]
	uint unkn1_6;//Values:[2]
	uint unkn1_7;//Values:[2]
	uint unkn1_8;//Values:[2, 4]
	uint unkn1_9;//Values:[1, 2]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[2]
	uint unkn1_12;//Values:[2]
	uint unkn1_13;//Values:[2]
	uint unkn1_14;//Values:[2]
	uint unkn1_15;//Values:[2]
	uint unkn1_16;//Values:[2, 4]
	uint unkn1_17;//Values:[1, 2]
	uint unkn1_18;//Values:[2]
	uint unkn1_19;//Values:[2]
	uint unkn1_20;//Values:[2]
	uint unkn1_21;//Values:[2]
	uint unkn1_22;//Values:[2]
	uint unkn1_23;//Values:[2]
	uint unkn1_24;//Values:[2, 4]
	uint unkn1_25;//Values:[1, 2]
	uint unkn1_26;//Values:[0, 2]
	uint unkn1_27;//Values:[0, 2]
	uint unkn1_28;//Values:[0, 2]
	uint unkn1_29;//Values:[2]
	uint unkn1_30;//Values:[2]
	uint unkn1_31;//Values:[2]
	uint unkn1_32;//Values:[2, 4]
	uint unkn1_33;//Values:[1, 2]
	uint unkn1_34;//Values:[2]
	uint unkn1_35;//Values:[2]
	uint unkn1_36;//Values:[2]
	uint unkn1_37;//Values:[2]
	uint unkn1_38;//Values:[1, 2]
	uint unkn1_39;//Values:[2]
	uint unkn1_40;//Values:[2, 3]
	uint unkn1_41;//Values:[2]
	uint unkn1_42;//Values:[2]
	uint unkn1_43;//Values:[2]
	uint expressionLength;//Values:[0, 44, 112, 416, 624]
	ubyte expression[expressionLength];

}TypeNodeBillboardExpression<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] + 420 more

	uint unkn1;//Values:[0, 1, 2, 4, 16, 18, 20, 128, 2048, 2050] + 3 more
	int unkn2;//Values:[135013179, 218899259, 226517076, 227594464, 234881023, 336339771, 437003067, 440814894, 442003070, 448518143] + 320 more
	int unkn3;//Values:[-1557241855, -1090321661, -1033699242, -16777216, -16772609, 724592819, 1191314181, 1663198975, 1663205631, 1664116915] + 30 more
	Color color0;
	Color color1;
	uint null4_0;//Values:[0]
	uint unkn4_1;//Values:[0, 1, 2, 3, 5]
	float unkn4_2;//Values:[0.0, 0.0872664675116539, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.5235987901687622, 0.5934119820594788, 0.6108652949333191, 0.6632251143455505, 0.6981317400932312] + 41 more
	float unkn4_3;//Values:[0.0, 0.05235988274216652, 0.0872664675116539, 0.1745329350233078, 0.5235987901687622, 0.7853981852531433, 0.8726646900177002, 1.2566370964050293, 1.5707963705062866, 3.1415927410125732]
	float unkn4_4;//Values:[0.0, 0.0017453293548896909, 0.0872664675116539, 0.10471976548433304, 0.1745329350233078, 0.2617993950843811, 0.3490658700466156, 0.5235987901687622, 0.6108652949333191, 0.6806784272193909] + 41 more
	float unkn4_5;//Values:[0.0, 0.05235988274216652, 0.1745329350233078, 0.3490658700466156, 0.5235987901687622, 0.6283185482025146, 0.7853981852531433, 0.8726646900177002, 1.5707963705062866, 3.1415927410125732] + 1 more
	float unkn4_6;//Values:[0.0, 0.05235988274216652, 0.0872664675116539, 0.12217305600643158, 0.13962635397911072, 0.1745329350233078, 0.22689281404018402, 0.2617993950843811, 0.3490658700466156, 0.4363323450088501] + 39 more
	float unkn4_7;//Values:[0.0, 0.05235988274216652, 0.0872664675116539, 0.12217305600643158, 0.1745329350233078, 0.4014257490634918, 0.5235987901687622, 0.7853981852531433, 1.0471975803375244, 1.3962634801864624] + 2 more
	float unkn4_8;//Values:[0.0, 0.009999999776482582, 0.017999999225139618, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03500000014901161, 0.03999999910593033, 0.05000000074505806, 0.054999999701976776] + 76 more
	float unkn4_9;//Values:[0.0, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.05000000074505806, 0.07000000029802322] + 19 more
	float unkn4_10;//Values:[0.10000000149011612, 0.11999999731779099, 0.15000000596046448, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071] + 17 more
	float unkn4_11;//Values:[0.0, 0.05999999865889549, 0.07000000029802322, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896, 1.0]
	float unkn4_12;//Values:[0.25, 0.30000001192092896, 0.5, 0.6000000238418579, 0.699999988079071, 0.75, 0.800000011920929, 1.0, 1.100000023841858, 1.2000000476837158] + 15 more
	float unkn4_13;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 8.0]
	float unkn4_14;//Values:[-0.6499999761581421, -0.5, -0.30000001192092896, -0.20000000298023224, -0.10000000149011612, 0.0, 0.10000000149011612, 0.4000000059604645, 0.75, 1.0] + 1 more
	float unkn4_15;//Values:[0.0, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579, 0.6499999761581421, 0.75] + 17 more
	float unkn4_16;//Values:[0.0, 0.10000000149011612, 0.25, 0.30000001192092896, 0.800000011920929, 1.0, 1.5, 2.0, 3.0, 10.0]

}TypePolygon<bgcolor=0x0a2c0f>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1003\efd_0004_evc1003_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(58);

}TypePolygonClip<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[22, 32, 67, 73, 138, 144, 205, 211, 996]

	uint unkn1_0;//Values:[1, 8193]
	uint unkn1_1;//Values:[4]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[2]
	uint unkn1_6;//Values:[2]
	uint unkn1_7;//Values:[2]
	uint unkn1_8;//Values:[2]
	uint unkn1_9;//Values:[2]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[2]
	uint unkn1_12;//Values:[2]
	uint unkn1_13;//Values:[2]
	uint unkn1_14;//Values:[2, 4]
	uint unkn1_15;//Values:[2]
	uint unkn1_16;//Values:[2]
	uint unkn1_17;//Values:[2]
	uint unkn1_18;//Values:[2]
	uint expressionLength;//Values:[28, 56]
	ubyte expression[expressionLength];

}TypePolygonExpression<bgcolor=0xef6ade>;//Example: natives\NSW\vfx\editor\efd_pl\efd_c-axe\efd_0004_c-axe_40_0001.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(60);

}TypePolygonMaterial<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[34, 43, 187]

	uint unkn1;//Values:[3, 256]
	int unkn2;//Values:[-1073741825, -1, 993725706]
	int unkn3;//Values:[-10412028, -1]
	float unkn4;//Values:[1.0, 16.0]
	float unkn5;//Values:[0.0, 12.0]
	float unkn6;//Values:[0.0, 21.0]
	float unkn7;//Values:[-0.5, 0.0]
	uint unkn8;//Values:[0, 2]
	float unkn9;//Values:[4.0, 10.0]
	float unkn10;//Values:[0.0, 1.0]
	float unkn11;//Values:[1.0, 64.0]
	uint unkn12;//Values:[1, 10]
	uint unkn13;//Values:[0, 1, 6]
	uint unkn14;//Values:[1, 6]
	uint unkn15;//Values:[1]
	int unkn16;//Values:[-1]
	int unkn17;//Values:[-1]
	int unkn18;//Values:[-1]
	float unkn19;//Values:[0.5]
	float unkn20;//Values:[1.0]
	
	

}TypePolygonTrail<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(63);

}TypePolygonTrailMaterial<bgcolor=0x3f16f9>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 14, 23, 36, 59, 63, 65, 69, 73, 87] + 63 more

	uint unkn1;//Values:[0, 16, 32, 48, 128, 144, 160]
	Color color0;
	Color color1;
	float unkn2_0;//Values:[1.0, 1.5, 2.0, 3.0, 3.5, 4.0, 5.0, 10.0, 20.0, 40.0] + 2 more
	uint null2_1;//Values:[0]
	uint null2_2;//Values:[0]
	float unkn2_3;//Values:[0.10000000149011612, 0.11999999731779099, 0.20000000298023224, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929] + 7 more
	float unkn2_4;//Values:[0.0, 0.02500000037252903, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.5, 1.0]
	float unkn2_5;//Values:[0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.17000000178813934, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645, 0.5, 0.6000000238418579] + 9 more
	float unkn2_6;//Values:[0.0, 0.019999980926513672, 0.02499997615814209, 0.029999971389770508, 0.04000000283122063, 0.04999995231628418, 0.04999998211860657, 0.04999999701976776, 0.05000000819563866, 0.050000011920928955] + 9 more
	float unkn2_7;//Values:[0.5, 0.800000011920929, 1.0]
	float unkn2_8;//Values:[0.0, 0.800000011920929, 1.0, 2.0]
	uint unkn2_9;//Values:[0, 2, 18, 34, 65, 66, 68, 262, 326, 512] + 2 more
	float unkn2_10;//Values:[0.05000000074505806, 0.10000000149011612, 0.15000000596046448, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.5, 0.699999988079071, 0.800000011920929, 1.0] + 12 more
	float unkn2_11;//Values:[0.0, 0.02500000037252903, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645, 1.0, 2.0] + 1 more
	float unkn2_12;//Values:[0.0, 0.10000000149011612, 0.15000000596046448, 0.20000000298023224, 0.5, 1.0, 2.0, 5.0, 10.0, 30.0] + 7 more
	float unkn2_13;//Values:[0.0, 5.0]
	float unkn2_14;//Values:[0.009999999776482582, 0.019999999552965164, 0.10000000149011612, 0.20000000298023224, 0.4000000059604645, 0.5, 0.75, 0.800000011920929, 0.9800000190734863, 1.0]
	float unkn2_15;//Values:[0.0, 0.050000011920928955]
	float unkn2_16;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.6000000238418579, 0.949999988079071, 1.0]
	float unkn2_17;//Values:[0.0, 0.09999999403953552, 0.15000000596046448]
	uint unkn2_18;//Values:[2, 3, 4, 5, 8, 12, 25, 64, 150]
	float unkn2_19;//Values:[-0.8830221891403198, -0.7602254748344421, 0.0, 0.7602254748344421, 0.8830221891403198]
	float unkn2_20;//Values:[-0.11743783950805664, -0.10579991340637207, 0.0, 1.0]
	float unkn2_21;//Values:[-1.0, -0.637904942035675, -0.3420201241970062, 0.0, 1.0]
	float unkn2_22;//Values:[-0.13790494203567505, 0.0, 0.12813955545425415, 1.0]
	float unkn2_23;//Values:[-1.0, 0.0, 0.32139378786087036]
	float unkn2_24;//Values:[0.0, 1.0]
	float unkn2_25;//Values:[-0.813797652721405, 0.0, 0.813797652721405]
	uint null2_26;//Values:[0]
	float unkn2_27;//Values:[-1.0, -0.5, 1.0]
	uint null2_28;//Values:[0]
	float unkn2_29;//Values:[0.0, 0.2961980998516083]
	uint null2_30;//Values:[0]
	float unkn2_31;//Values:[0.5, 1.0, 2.0, 3.0, 5.0]
	uint null2_32;//Values:[0]
	int unkn2_33;//Values:[-16313825, -14799837, -13679291, -1, 6894096]
	int unkn2_34;//Values:[-16710907, -14201600, -9883120, -1]
	int unkn2_35;//Values:[-16710907, -14201600, -9883120, -1]
	float unkn2_36;//Values:[0.10999999940395355, 0.3700000047683716, 0.5]
	float unkn2_37;//Values:[1.0]
	float unkn2_38;//Values:[0.20000000298023224, 0.5, 1.0, 6.0]
	float unkn2_39;//Values:[0.0, 0.5, 0.699999988079071, 0.75, 0.800000011920929, 1.0]
	float unkn2_40;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 1.0, 2.0]
	float unkn2_41;//Values:[0.3100000023841858, 0.5, 0.5299999713897705]
	float unkn2_42;//Values:[0.8899999856948853, 1.0]
	float unkn2_43;//Values:[1.0, 5.0, 7.0]
	float unkn2_44;//Values:[1.0]
	float unkn2_45;//Values:[1.0, 5.0]
	float unkn2_46;//Values:[0.5]
	float unkn2_47;//Values:[0.9599999785423279, 1.0]
	float unkn2_48;//Values:[0.7799999713897705, 0.800000011920929, 0.949999988079071, 1.0]
	float unkn2_49;//Values:[0.949999988079071, 1.0]

}TypeRibbonChain<bgcolor=0x363669>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc1015\efd_0004_evc1015_01_0006.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(55);

}TypeRibbonChainExpression<bgcolor=0xfd1e6e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(41);

}TypeRibbonChainMaterial<bgcolor=0x5eac94>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(42);

}TypeRibbonChainMaterialClip<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(43);

}TypeRibbonChainMaterialExpression<bgcolor=0x2f158b>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[58, 74, 85, 105, 147, 165, 174, 214, 223, 227] + 87 more

	uint unkn1;//Values:[0, 2, 4, 16, 32, 50]
	Color color0;
	Color color1;
	float unkn2_0;//Values:[1.0, 1.2000000476837158, 5.0, 10.0, 20.0, 30.0, 50.0, 60.0, 100.0, 150.0] + 2 more
	float unkn2_1;//Values:[0.0, 1.0, 3.0, 6.0]
	uint null2_2;//Values:[0]
	float unkn2_3;//Values:[0.029999999329447746, 0.20000000298023224, 0.5, 0.699999988079071, 0.800000011920929, 1.0, 1.2999999523162842, 1.5, 2.0, 3.0] + 10 more
	float unkn2_4;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.05000000074505806, 0.20000000298023224, 0.30000001192092896, 0.5, 5.0, 15.0]
	float unkn2_5;//Values:[0.07500000298023224, 0.10000000149011612, 0.15000000596046448, 0.18000000715255737, 0.20000000298023224, 0.25, 0.4000000059604645, 0.5, 1.0, 1.5] + 4 more
	uint unkn2_6;//Values:[0, 1017370368, 1017370384, 1020054736, 1028443340, 1028443342, 1028443392, 1045220544, 1045220556, 1045220558] + 1 more
	float unkn2_7;//Values:[0.30000001192092896, 0.5, 1.0, 1.5, 2.0]
	float unkn2_8;//Values:[0.0, 0.800000011920929, 1.0]
	uint unkn2_9;//Values:[0, 1, 2, 3, 5, 9, 12]
	float unkn2_10;//Values:[0.5, 0.550000011920929]
	float unkn2_11;//Values:[0.0, 0.8999999761581421, 1.0]
	uint unkn2_12;//Values:[0, 1, 3, 5, 10, 200, 1000]
	uint unkn2_13;//Values:[0, 1, 5, 10, 200, 1000]
	uint unkn2_14;//Values:[2, 3, 4, 5, 6, 8, 10]
	float unkn2_15;//Values:[0.0, 0.10000000149011612, 30.0]
	int unkn2_16;//Values:[-16776961, -1, 255, 2327021, 16777215, 1660956671]
	int unkn2_17;//Values:[-14450195, -30720, -1, 255, 26367, 1207959551]
	int unkn2_18;//Values:[-14450195, -30720, -1, 26367, 855638271, 1207959551, 1291845887]
	float unkn2_19;//Values:[0.20000000298023224, 0.5, 1.0]
	float unkn2_20;//Values:[0.4000000059604645, 1.0]
	float unkn2_21;//Values:[0.0, 1.0]
	float unkn2_22;//Values:[0.5, 1.0, 15.0]
	float unkn2_23;//Values:[0.5, 1.0, 15.0]
	float unkn2_24;//Values:[0.10000000149011612, 0.3499999940395355, 0.5]
	float unkn2_25;//Values:[1.0]
	float unkn2_26;//Values:[0.800000011920929, 0.949999988079071, 1.0]
	float unkn2_27;//Values:[1.0]
}TypeRibbonFixEnd<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_ot\efd_airou\efd_0004_airou_10_0050.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(56);

}TypeRibbonFixEndExpression<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(44);

}TypeRibbonFixEndMaterial<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(45);

}TypeRibbonFixEndMaterialClip<bgcolor=0xe78607>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(46);

}TypeRibbonFixEndMaterialExpression<bgcolor=0x3a2006>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[12, 13, 15, 16, 18, 19, 21, 23, 25, 29] + 288 more
	uint unkn1;//Values:[0, 1, 3, 16, 32, 35, 36, 64, 96, 99] + 6 more
	int unkn2;//Values:[-2147483393, -2147467009, -2131107198, -2130706433, -1725684173, -1711276033, -1635959780, -1635427768, -1383777258, -1275822193] + 141 more
	int unkn3;//Values:[-1090321661, -16777216, -16777125, -16774460, -16765953, -16765210, -16763905, -16569734, -16513854, -16444186] + 33 more
	float unkn4;//Values:[1.0, 1.100000023841858, 1.5, 2.0, 3.0, 5.0, 7.0, 8.0, 10.0, 14.0] + 24 more
	float unkn5;//Values:[0.0, 1.0, 6.0, 20.0, 30.0, 40.0]
	float unkn6;//Values:[0.0, 0.5, 10.0, 300.0]
	float unkn7;//Values:[0.0020000000949949026, 0.0024999999441206455, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.03999999910593033, 0.04500000178813934] + 31 more
	uint unkn8;//Values:[0, 981668463, 985963430, 1000593162, 1008981770, 1014350479, 1017370378, 1020054733, 1022739087, 1025758986] + 10 more
	float unkn9;//Values:[0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.03500000014901161, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07500000298023224] + 25 more
	uint unkn10;//Values:[0, 1000593160, 1000593162, 1008981760, 1008981768, 1008981772, 1008982018, 1017370378, 1017370380, 1017370382] + 22 more
	float unkn11;//Values:[1.0, 1.2000000476837158, 2.0]
	float unkn12;//Values:[-1.0, 0.0, 0.4000000059604645, 0.5, 0.699999988079071, 0.800000011920929, 1.0, 2.0, 3.0, 10.0]
	uint unkn13;//Values:[0, 1, 2, 3, 4, 5, 8, 9, 16, 17] + 5 more
	float unkn14;//Values:[0.029999999329447746, 0.03999999910593033, 0.04500000178813934, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07999999821186066, 0.09000000357627869, 0.10000000149011612, 0.15000000596046448] + 34 more
	float unkn15;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.4000000059604645] + 6 more
	uint unkn16;//Values:[2, 3, 4, 5, 6, 7, 8, 9, 10, 12] + 6 more
	uint unkn17;//Values:[0, 1, 2, 3, 4, 30]
	int unkn18;//Values:[-2147483393, -2147461633, -2147439873, -1795162113, -16777216, -16777088, -16776961, -16237825, -16225281, -15787444] + 19 more//Possibly color
	int unkn19;//Values:[-2147483393, -2141031562, -2097152001, -67108864, -60338944, -60336640, -60332288, -16777216, -16777088, -16772735] + 15 more//Possibly color
	int unkn20;//Values:[-2147483393, -2141031562, -2097152001, -67108864, -60338944, -60336640, -60332288, -16777216, -16777088, -16773633] + 17 more//Possibly color
	float unkn21;//Values:[0.05000000074505806, 0.09000000357627869, 0.10999999940395355, 0.20000000298023224, 0.3199999928474426, 0.4000000059604645, 0.5, 0.699999988079071]
	float unkn22;//Values:[0.20000000298023224, 0.6200000047683716, 0.800000011920929, 1.0]
	float unkn23;//Values:[0.20000000298023224, 0.5, 0.800000011920929, 1.0, 1.2000000476837158, 1.2999999523162842, 2.0]
	float unkn24;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 2.0]
	float unkn25;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.5, 1.0, 2.0]
	float unkn26;//Values:[0.25, 0.3499999940395355, 0.4000000059604645, 0.47999998927116394, 0.5, 0.5299999713897705, 0.7900000214576721, 1.0]
	float unkn27;//Values:[0.75, 0.8899999856948853, 1.0]
	float unkn28;//Values:[0.5, 0.5199999809265137, 0.6000000238418579, 0.6800000071525574, 0.800000011920929, 0.8100000023841858, 0.8999999761581421, 0.9399999976158142, 0.949999988079071, 1.0]
	float unkn29;//Values:[0.949999988079071, 1.0]
		 

}TypeRibbonFollow<bgcolor=0x3f16f9>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[61, 102, 366, 384, 458, 985, 2273, 2284]

	uint unkn1_0;//Values:[0, 1, 3, 4]
	uint unkn1_1;//Values:[2, 4]
	uint unkn1_2;//Values:[1, 2]
	uint unkn1_3;//Values:[0, 2]
	uint unkn1_4;//Values:[2]
	uint unkn1_5;//Values:[2]
	uint unkn1_6;//Values:[0, 2]
	uint unkn1_7;//Values:[0, 2]
	uint expressionLength;//Values:[0, 28, 76, 104]
	ubyte expression[expressionLength];

}TypeRibbonFollowExpression<bgcolor=0x08a9e5>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(35);

}TypeRibbonFollowMaterial<bgcolor=0x731727>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(36);

}TypeRibbonFollowMaterialClip<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(37);

}TypeRibbonFollowMaterialExpression<bgcolor=0x363669>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 13, 14, 15, 16, 17, 22, 24, 25, 26] + 582 more

	uint unkn1_0;//Values:[0, 1, 2, 3, 4, 16, 32, 35, 48, 64] + 7 more
	int unkn1_1;//Values:[-1711276033, -4018689, -3750202, -1127681, -786433, -400766, -1, 2103340401] + 534 more
	int unkn1_2;//Values:[-1] + 919 more
	float unkn1_3;//Values:[0.10000000149011612, 0.3499999940395355, 0.4000000059604645, 0.5, 0.75, 1.0, 1.2000000476837158, 1.2999999523162842, 1.5, 2.0] + 22 more
	float unkn1_4;//Values:[0.0, 0.5, 1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0] + 3 more
	float unkn1_5;//Values:[0.0, 1.0, 2.0, 10.0, 12.0]
	float unkn1_6;//Values:[0.0, 0.0013000000035390258, 0.004999999888241291, 0.009999999776482582, 0.02070000022649765, 0.029999999329447746, 0.05000000074505806, 0.05999999865889549, 0.07500000298023224, 0.10000000149011612] + 62 more
	float unkn1_7;//Values:[0.0, 0.0007999999797903001, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806] + 21 more
	float unkn1_8;//Values:[0.007499999832361937, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.05999999865889549, 0.07999999821186066, 0.10000000149011612, 0.11999999731779099] + 39 more
	uint unkn1_9;//Values:[0, 1000593160, 1000593161, 1000593162, 1004888132, 1008981769, 1017370368, 1017370376, 1017370378, 1017370380] + 28 more
	float unkn1_10;//Values:[0.5, 0.800000011920929, 1.0, 1.5, 2.0, 3.0, 10.0]
	float unkn1_11;//Values:[0.0, 0.10000000149011612, 0.30000001192092896, 0.5, 0.75, 0.800000011920929, 0.8500000238418579, 1.0, 1.25, 2.0] + 4 more
	uint unkn1_12;//Values:[0, 1, 2, 3, 4, 8, 12, 16, 19, 32] + 8 more
	float unkn1_13;//Values:[0.0, 0.11999999731779099, 0.30000001192092896, 0.3499999940395355, 0.3799999952316284, 0.4000000059604645, 0.4300000071525574, 0.5, 0.6000000238418579, 0.699999988079071] + 45 more
	float unkn1_14;//Values:[0.0, 0.019999999552965164, 0.05000000074505806, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.699999988079071, 1.0] + 8 more
	uint unkn1_15;//Values:[2, 3, 4, 5, 6, 8, 9, 15]
	float unkn1_16;//Values:[0.30000001192092896, 0.4000000059604645, 0.44999998807907104, 0.5, 0.550000011920929, 0.6000000238418579, 0.6499999761581421]
	float unkn1_17;//Values:[0.0, 0.05000000074505806, 0.07500000298023224, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.3499999940395355, 0.4000000059604645, 0.5] + 23 more
	float unkn1_18;//Values:[0.0, 0.10000000149011612, 8.5, 10.0]
	float unkn1_19;//Values:[0.0, 0.0010000000474974513, 0.05000000074505806]
	float unkn1_20;//Values:[-1.0, -0.9848077297210693, -0.951251208782196, -0.9396926164627075, -0.8660253882408142, -0.8535533547401428, -0.8191519975662231, -0.7660444378852844, -0.75, -0.7399420738220215] + 62 more
	float unkn1_21;//Values:[-0.72829270362854, -0.7071067690849304, -0.6358092427253723, -0.6143752932548523, -0.447541207075119, -0.14644664525985718, 0.0, 0.07643041014671326, 0.08715573698282242, 0.12186934798955917] + 10 more
	float unkn1_22;//Values:[-1.0, -0.9961946606636047, -0.9951339960098267, -0.9848077297210693, -0.9659258127212524, -0.9396926164627075, -0.9374036192893982, -0.9063077569007874, -0.8660253882408142, -0.8514741659164429] + 61 more
	float unkn1_23;//Values:[-0.5159984230995178, -0.46941667795181274, -0.3292100131511688, -0.14489620923995972, -0.10579991340637207, -0.09676465392112732, -0.04193010926246643, -0.004865974187850952, 0.0, 0.001457512378692627] + 18 more
	float unkn1_24;//Values:[-1.0, -0.9980973601341248, -0.9848077297210693, -0.9659258127212524, -0.9396926164627075, -0.9379047155380249, -0.9254165291786194, -0.866025447845459, -0.8643777370452881, -0.843391478061676] + 66 more
	float unkn1_25;//Values:[-0.13917310535907745, -0.11465495824813843, -0.0019026398658752441, 0.0, 0.0012229979038238525, 0.0037269294261932373, 0.02802109718322754, 0.04193010926246643, 0.05456513166427612, 0.07452777028083801] + 14 more
	int unkn1_26;//Values:[-2145430597, -1, 33023, 989772] + 885 more
	int unkn1_27;//Values:[-1] + 917 more
	int unkn1_28;//Values:[-1] + 917 more
	float unkn1_29;//Values:[0.0, 0.07999999821186066, 0.12999999523162842, 0.17000000178813934, 0.20000000298023224, 0.36000001430511475, 0.4399999976158142, 0.44999998807907104, 0.5, 0.6100000143051147] + 5 more
	float unkn1_30;//Values:[0.4000000059604645, 0.6700000166893005, 0.9100000262260437, 1.0]
	float unkn1_31;//Values:[0.0, 0.10000000149011612, 0.4000000059604645, 0.5000100135803223, 0.699999988079071, 0.75, 0.800000011920929, 0.8999999761581421, 1.0, 1.5] + 3 more
	float unkn1_32;//Values:[0.5, 0.699999988079071, 1.0, 1.5, 3.0, 15.0]
	float unkn1_33;//Values:[0.5, 0.699999988079071, 1.0, 1.5, 2.0, 3.0, 5.0, 15.0]
	float unkn1_34;//Values:[0.0, 0.20000000298023224, 0.2199999988079071, 0.25, 0.5, 0.699999988079071, 0.7599999904632568, 1.0]
	float unkn1_35;//Values:[1.0]

}TypeRibbonLength<bgcolor=0xef6ade>;//Example: natives\NSW\vfx\editor\efd_pl\efd_h-bg\efd_0004_h-bg_20_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[165, 275, 336, 990, 1038, 3002]

	uint unkn1;//Values:[0, 1, 2, 3, 32]
	uint unkn2;//Values:[2, 4]
	uint unkn3;//Values:[1, 2, 4]
	uint unkn4;//Values:[2]
	uint unkn5;//Values:[2]
	uint unkn6;//Values:[2]
	uint unkn7;//Values:[2, 3]
	uint unkn8;//Values:[2, 3]
	uint expressionLength;//Values:[0, 28, 44, 104]
	ubyte expression[expressionLength];
}TypeRibbonLengthExpression<bgcolor=0x363669>;//Example: natives\NSW\vfx\editor\efd_cm\efd_0004_cm_64_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(38);

}TypeRibbonLengthMaterial<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(39);

}TypeRibbonLengthMaterialClip<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(40);

}TypeRibbonLengthMaterialExpression<bgcolor=0x0a2c0f>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[86, 117, 155, 160, 173, 197, 277, 533, 588, 1049] + 6 more

	uint unkn1;//Values:[0, 64]
	Color color0;
	Color color1;
	float unkn2_0;//Values:[48.0, 60.0, 100.0, 120.0, 200.0, 400.0]
	uint null2_1;//Values:[0]
	uint null2_2;//Values:[0]
	float unkn2_3;//Values:[0.019999999552965164, 0.03999999910593033, 0.20000000298023224, 0.30000001192092896, 1.0, 1.5]
	uint null2_4;//Values:[0]
	float unkn2_5;//Values:[0.019999999552965164, 0.10000000149011612, 0.20000000298023224, 0.4000000059604645, 1.0]
	uint null2_6;//Values:[0]
	float unkn2_7;//Values:[0.0, 1.0, 10.0]
	uint unkn2_8;//Values:[2, 3, 4, 8]
	float unkn2_9;//Values:[1.0]
	float unkn2_10;//Values:[1.0]

}TypeRibbonLightweight<bgcolor=0x7a5736>;//Example: natives\NSW\vfx\editor\efd_pl\efd_g-lan\efd_0004_g-lan_05_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(47);

}TypeRibbonLightweightMaterial<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(48);

}TypeRibbonLightweightMaterialClip<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(49);

}TypeRibbonLightweightMaterialExpression<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(34);

}TypeRibbonParticle<bgcolor=0x2a6866>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(61);

}TypeRibbonTrail<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 14, 17, 19, 22, 24, 27, 29, 32] + 55 more
	uint unkn1_0;//Values:[0, 16, 32, 64, 112, 2048, 4160, 8192, 8224, 32768] + 3 more
	Color unkn1_1;//Values:[] + 11 more
	int unkn1_2;//Values:[-11374994, -5121575, -1]
	float unkn1_3;//Values:[0.5, 0.6000000238418579, 0.800000011920929, 1.0, 1.25, 1.5, 2.0, 4.0, 5.0, 8.0] + 7 more
	uint null1_4;//Values:[0]
	uint null1_5;//Values:[0]
	float unkn1_6;//Values:[-3.0, 0.0]
	float unkn1_7;//Values:[-48.0, 0.0]
	float unkn1_8;//Values:[0.0, 8.0]
	float unkn1_9;//Values:[-0.25, -0.10000000149011612, -0.029999999329447746, 0.0, 0.10000000149011612, 0.11999999731779099, 0.20999999344348907, 0.25, 1.0, 2.0] + 3 more
	float unkn1_10;//Values:[-0.3499999940395355, -0.30000001192092896, -0.20000000298023224, -0.05000000074505806, 0.0, 0.05000000074505806, 0.10000000149011612, 0.30000001192092896, 0.5, 1.0] + 3 more
	float unkn1_11;//Values:[0.0, 0.18000000715255737, 0.25, 0.2800000011920929, 0.3499999940395355, 0.4000000059604645, 0.44999998807907104, 0.5, 1.0, 1.100000023841858] + 2 more
	uint unkn1_12;//Values:[1, 2, 4, 5, 6, 8, 10, 12, 15, 16] + 1 more
	float unkn1_13;//Values:[0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.05999999865889549, 0.07000000029802322, 0.07500000298023224, 0.07999999821186066, 0.10000000149011612, 0.10999999940395355, 0.11999999731779099] + 7 more
	float unkn1_14;//Values:[0.0, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.05000000074505806, 0.20000000298023224]
	float unkn1_15;//Values:[0.0, 0.0010000000474974513, 0.019999999552965164, 0.5, 0.800000011920929, 1.0, 1.25, 1.2699999809265137, 1.5, 2.0]
	float unkn1_16;//Values:[0.0, 0.0005000000237487257, 0.10000000149011612, 0.25, 0.5]
	float unkn1_17;//Values:[0.0, 0.800000011920929, 1.0]
	uint unkn1_18;//Values:[0, 1]
	uint unkn1_19;//Values:[1, 4]
	uint null1_20;//Values:[0]
	uint null1_21;//Values:[0]
	float unkn1_22;//Values:[1.3348532351717737e-38, 1.4100485923256005e-38, 7.087991819656483e-16, nan, nan, nan, nan, nan, nan]
	float unkn1_23;//Values:[-1.7014118346046923e+38, 1.4100485923256005e-38, 7.087991819656483e-16, nan, nan, nan, nan, nan]
	float unkn1_24;//Values:[-1.7014118346046923e+38, 1.4100485923256005e-38, 7.087991819656483e-16, 6.505378991050748e-08, nan, nan, nan, nan]
	float unkn1_25;//Values:[0.0, 0.17000000178813934, 0.5, 1.0]
	float unkn1_26;//Values:[0.800000011920929, 1.0]
	float unkn1_27;//Values:[0.949999988079071, 1.0]
	float unkn1_28;//Values:[1.0]
	float unkn1_29;//Values:[0.0, 0.4000000059604645, 0.5, 1.0]
	uint unkn1_30;//Values:[0, 1045220558]
	float unkn1_31;//Values:[0.0, 5.0]
	uint null1_32;//Values:[0]
	uint unkn1_33;//Values:[0, 4, 50]
	uint unkn1_34;//Values:[0, 4, 6, 10]
	float unkn1_35;//Values:[0.0, 10.0, 20.0, 30.0, 50.0]
	float unkn1_36;//Values:[0.0, 10.0, 50.0]
	float unkn1_37;//Values:[0.4000000059604645, 0.5, 0.6000000238418579, 0.699999988079071, 0.800000011920929, 0.9900000095367432]
	float unkn1_38;//Values:[0.0, 0.009999990463256836, 0.10000002384185791]
	float unkn1_39;//Values:[0.5, 0.6000000238418579, 0.800000011920929, 0.8999999761581421]
	float unkn1_40;//Values:[0.0, 0.10000002384185791]
	uint null1_41;//Values:[0]
	float unkn1_42;//Values:[0.0, 0.10000000149011612, 0.30000001192092896, 0.3499999940395355, 0.5, 1.0, 2.0]
	float unkn1_43;//Values:[0.0, 0.10000000149011612, 0.30000001192092896, 0.3499999940395355, 0.5, 1.0, 2.0]
	float unkn1_44;//Values:[0.0, 0.10000000149011612, 0.5]
	float unkn1_45;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.25, 0.5, 1.0, 9.0]
	float unkn1_46;//Values:[0.0, 0.10000000149011612, 0.5, 0.699999988079071, 1.0, 2.0]
	float unkn1_47;//Values:[0.0, 0.10000000149011612, 0.5, 0.699999988079071, 1.0, 2.0]
	uint unkn1_48;//Values:[0, 2]
	uint unkn1_49;//Values:[0, 3, 8]
	uint unkn1_50;//Values:[0, 1]
	uint unkn1_51;//Values:[0, 5]
	uint null1_52;//Values:[0]
	uint null1_53;//Values:[0]
	uint null1_54;//Values:[0]
	uint null1_55;//Values:[0]
	uint unkn1_56;//Values:[2, 4]
	ubyte null2;//Values:[0]			
	float unkn3_0;//Values:[0.0, 1.0]
	float unkn3_1;//Values:[0.0, 6.2831854820251465]
	float unkn3_2;//Values:[1.0]
	uint null3_3;//Values:[0]
	uint boneNameLength;//Values:[2, 8, 12, 16, 18, 24]
	wstring boneName;//Values:[24] + 11 more
}TypeStrainRibbon<bgcolor=0x02b72e>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[28, 54, 113, 306, 338, 353, 2294, 2465, 4540, 6620]

	uint unkn1_0;//Values:[28, 128, 252, 1153, 1276]
	uint unkn1_1;//Values:[2, 4]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2, 4]
	uint unkn1_4;//Values:[2, 4]
	uint unkn1_5;//Values:[2, 4]
	uint unkn1_6;//Values:[2, 4]
	uint unkn1_7;//Values:[2, 4]
	uint unkn1_8;//Values:[2, 4]
	uint unkn1_9;//Values:[2, 3]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[2, 4]
	uint unkn1_12;//Values:[2]
	uint unkn1_13;//Values:[2]
	uint expressionLength;//Values:[44, 84, 100, 168, 196, 276, 408]
	ubyte expression[expressionLength];

}TypeStrainRibbonExpression<bgcolor=0x3a2006>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(50);

}TypeStrainRibbonMaterial<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(51);

}TypeStrainRibbonMaterialClip<bgcolor=0xbe9672>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	float unkn1_0;
	float unkn1_1;
	float unkn1_2;
	float unkn1_3;
	float unkn1_4;
	float unkn1_5;
	float unkn1_6;
	float unkn1_7;
	float unkn1_8;
	float unkn1_9;

}TypeStrainRibbonMaterialExpression<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 18, 19, 20, 26, 27, 31, 32, 33, 38] + 451 more

	uint unkn1_0;//Values:[0, 1]
	float unkn1_1;//Values:[0.0, 1.0]
	uint null1_2;//Values:[0]
	float unkn1_3;//Values:[-0.5, -0.03999999910593033, -0.029999999329447746, -0.019999999552965164, -0.009999999776482582, -0.006500000134110451, -0.006000000052154064, -0.0035000001080334187, -0.0020000000949949026, -0.001500000013038516] + 11 more
	float unkn1_4;//Values:[0.0, 0.0010000000474974513, 0.001500000013038516, 0.009999999776482582]
	float unkn1_5;//Values:[1.0]
	uint null1_6;//Values:[0]
	float unkn1_7;//Values:[0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9900000095367432, 1.0]
	float unkn1_8;//Values:[0.0, 0.009999990463256836]
	uint null1_9;//Values:[0]
	uint null1_10;//Values:[0]
	float unkn1_11;//Values:[-0.05000000074505806, 0.0, 0.02500000037252903, 0.10000000149011612, 0.20000000298023224, 0.25, 0.30000001192092896, 0.5, 0.6499999761581421]
	float unkn1_12;//Values:[0.0, 1.0]

}UVScroll<bgcolor=0x85aa32>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[6, 11, 12, 13, 14, 15, 16, 17, 18, 19] + 3300 more
	uint null1;//Values:[0]
	uint unkn2;//Values:[1, 2]
	uint startingFrame;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 19 more
	uint startingFrameRandom;//Values:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] + 20 more
	float animationSpeed;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.05000000074505806, 0.07000000029802322, 0.07500000298023224, 0.10000000149011612, 0.11999999731779099, 0.125] + 60 more
	float animationSpeedRandom;//Values:[0.0, 0.009999999776482582, 0.019999999552965164, 0.029999999329447746, 0.04999999701976776, 0.05000000074505806, 0.07000000029802322, 0.07500000298023224, 0.10000000149011612, 0.11999999731779099] + 68 more
	uint mode<comment="0 - Show only starting frame,1 - Looped Animation, 2 - Play once and disappear after last frame, 3 - Play once and stay on last frame until end of duration in Life struct.">;//Values:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] + 156 more
	uint pathUnicodeCharCount;//Values:[32, 35, 37, 44, 46]
	wstring uvsPath;//Values:[46] + 144 more
}UVSequence<bgcolor=0x02b72e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(84);

}UVSequenceExpression<bgcolor=0x056e12>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[18, 19, 25, 30, 40, 45, 53, 56, 64, 69] + 38 more

	uint unkn1_0;//Values:[1, 3]
	float unkn1_1;//Values:[0.4000000059604645, 0.5, 0.699999988079071, 1.0, 1.2000000476837158, 1.5, 2.0]
	float unkn1_2;//Values:[0.5, 0.800000011920929, 1.0, 1.100000023841858, 1.2000000476837158, 1.5, 2.0]
	float unkn1_3;//Values:[0.20000000298023224, 0.4000000059604645, 0.44999998807907104, 0.5, 0.6000000238418579]
	float unkn1_4;//Values:[0.20000000298023224, 0.25, 0.4000000059604645, 0.44999998807907104, 0.5, 0.6000000238418579, 1.0]
	float unkn1_5;//Values:[0.8999999761581421, 0.9300000071525574, 0.949999988079071, 0.9900000095367432, 1.0]
	float unkn1_6;//Values:[0.8999999761581421, 0.9300000071525574, 0.949999988079071, 0.9900000095367432, 1.0]

}UVSequenceModifier<bgcolor=0x08a9e5>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0010\efd_0004_evc0010_00_0028.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[17, 18, 21, 23, 24, 25, 28, 29, 31, 35] + 755 more

	uint unkn1_0;//Values:[33, 34, 35, 37, 38, 39]
	float unkn1_1;//Values:[-9.0, -6.0, -5.898686408996582, -5.0847015380859375, -5.0, -4.987617015838623, -4.0, -3.294557571411133, -3.0, -2.4915924072265625] + 108 more
	float unkn1_2;//Values:[-25533.64453125, -241.9564208984375, -107.4259262084961, -34.78888702392578, -32.540103912353516, -24.0, -20.0, -17.57143783569336, -15.0, -12.0] + 148 more
	float unkn1_3;//Values:[-350.0, -10.0, -6.162955284118652, -5.35173225402832, -5.1341552734375, -5.0, -4.955313682556152, -4.651663780212402, -4.4350266456604, -4.0] + 132 more
	float unkn1_4;//Values:[0.10000000149011612, 0.16095930337905884, 0.3680002689361572, 0.5, 0.550000011920929, 0.5629208087921143, 0.699999988079071, 0.800000011920929, 0.8500000238418579, 0.8999999761581421] + 118 more
	float unkn1_5;//Values:[0.10000000149011612, 0.30000001192092896, 0.3461158275604248, 0.5, 0.550000011920929, 0.699999988079071, 0.800000011920929, 0.806717038154602, 0.8500000238418579, 0.8999999761581421] + 126 more
	float unkn1_6;//Values:[0.10000000149011612, 0.5, 0.550000011920929, 0.699999988079071, 0.800000011920929, 0.8500000238418579, 0.8999999761581421, 0.949999988079071, 1.0, 1.100000023841858] + 116 more
	float unkn1_7;//Values:[0.0, 0.05235988274216652, 0.8552113771438599]
	float unkn1_8;//Values:[0.0, 0.05235988274216652, 0.5235987901687622, 0.6981317400932312, 0.7853981852531433, 0.9599310755729675, 1.0471975803375244]
	float unkn1_9;//Values:[0.0, 0.05235988274216652]
	float unkn1_10;//Values:[-1.0]

}UnitCulling<bgcolor=0xbe9672>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_00_0010.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[118, 410, 1332, 1447, 2058, 3054, 3770, 17694, 19089]

	uint unkn1_0;//Values:[0, 1, 6]
	uint null1_1;//Values:[0]
	uint null1_2;//Values:[0]
	float unkn1_3;//Values:[-1.0, 0.0, 0.5]
	float unkn1_4;//Values:[0.20000000298023224, 0.30000001192092896, 0.5, 2.0]
	float unkn1_5;//Values:[0.20000000298023224, 0.5, 2.0]
	float unkn1_6;//Values:[0.20000000298023224, 0.30000001192092896, 0.5, 2.0]
	float unkn1_7;//Values:[0.0, 1.5707963705062866]
	uint null1_8;//Values:[0]
	uint null1_9;//Values:[0]
	float unkn1_10;//Values:[0.0, 4.0, 6.0, 8.0, 10.0]
	uint null1_11;//Values:[0]
	uint boneNameLength;//Values:[2]
	wstring boneName;//Values:[2]

}VanishArea3D<bgcolor=0x08a9e5>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(79);

}VanishArea3DExpression<bgcolor=0x7a5736>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(184);

}VectorField<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[13, 23, 25, 29, 32, 34, 43, 44, 48, 54] + 186 more

	float unkn1_0;//Values:[-1.0, 0.009999999776482582, 0.15000000596046448, 0.4000000059604645, 0.44999998807907104, 0.5, 0.6000000238418579, 0.800000011920929, 0.8500000238418579, 1.0] + 18 more
	float unkn1_1;//Values:[0.009999999776482582, 0.10000000149011612, 0.5, 0.699999988079071, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0] + 3 more
	uint null1_2;//Values:[0]
	float unkn1_3;//Values:[0.009999999776482582, 0.10000000149011612, 0.20000000298023224, 0.5, 0.699999988079071, 1.0, 1.100000023841858, 1.2000000476837158, 1.2999999523162842, 1.5] + 6 more
	float unkn1_4;//Values:[0.07999999821186066, 0.10000000149011612, 0.17000000178813934, 0.20000000298023224, 0.5, 0.800000011920929, 0.8999999761581421, 1.0, 1.100000023841858, 1.1000003814697266] + 21 more
	float unkn1_5;//Values:[0.0, 0.11999999731779099, 0.15000000596046448, 0.17000000178813934, 0.20999999344348907, 0.23000000417232513, 0.25999999046325684, 0.28999999165534973, 0.30000001192092896, 0.3199999928474426] + 43 more
	float unkn1_6;//Values:[3.0]
	float unkn1_7;//Values:[10.0]
	float unkn1_8;//Values:[-0.6981316804885864, -0.5585053563117981, -0.1745329201221466, 0.0, 0.10471975803375244, 0.296705961227417, 0.3490658402442932, 0.4363323152065277, 0.5235987901687622, 0.6981316804885864] + 4 more
	float unkn1_9;//Values:[-3.4906585216522217, -0.3839724361896515, 0.0, 0.13962633907794952, 0.3490658402442932, 0.6108652353286743, 0.6457718014717102, 0.8726646304130554, 1.5707963705062866, 3.1415927410125732]
	float unkn1_10;//Values:[-1.0471975803375244, -0.8726646304130554, -0.45378559827804565, -0.3490658402442932, 0.0, 0.0872664600610733, 0.296705961227417, 0.5235987901687622, 0.9948376417160034, 1.326450228691101] + 3 more
	float unkn1_11;//Values:[0.5, 0.949999988079071, 1.0, 1.100000023841858, 1.2000000476837158, 2.0, 2.200000047683716, 3.0]
	float unkn1_12;//Values:[0.5, 0.949999988079071, 1.0, 1.100000023841858, 2.200000047683716, 3.0, 5.0]
	float unkn1_13;//Values:[0.5, 0.949999988079071, 1.0, 1.100000023841858, 1.2000000476837158, 2.0, 2.200000047683716, 3.0]
	float unkn1_14;//Values:[0.9200000166893005, 0.949999988079071, 0.9599999785423279, 0.9700000286102295, 0.9800000190734863, 0.9850000143051147, 0.9900000095367432, 0.9919999837875366, 0.9950000047683716, 0.9959999918937683] + 5 more
	float unkn1_15;//Values:[0.0, 0.0020000000949949026, 0.004999999888241291, 0.009999999776482582, 0.014999999664723873, 0.019999999552965164]
	uint null1_16;//Values:[0]
	uint null1_17;//Values:[0]
	uint unkn1_18;//Values:[33, 35, 37, 39, 41, 43, 45, 47, 57, 59] + 1 more
	uint unkn1_19;//Values:[0, 1, 2, 3]

}VectorFieldParameter<bgcolor=0x731727>;//Example: natives\NSW\vfx\editor\efd_pl\efd_l-swd\efd_0004_l-swd_99_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[107, 369, 577, 598, 615, 1747, 2558]

	uint unkn0;//Values:[1024, 2048, 4096]
	uint null1;//Values:[0]
	int unkn2;//Values:[-1]
	float unkn3;//Values:[10.0, 44.0, 45.0, 54.0, 80.0, 100.0]
	uint unkn4;//Values:[1]
	uint unkn5;//Values:[2, 3]
	uint null6;//Values:[0]
	uint substruct1Length;//Values:[8]
	uint substruct2Length;//Values:[24, 36]
	uint substruct3Length;//Values:[0]
	if (substruct1Length > 0)
	{
		struct
		{
			int substructValue[substruct1Length/4];
		}substruct1;
	}
	 if (substruct2Length > 0)
	{
		struct
		{
			int substructValue[substruct2Length/4];
		}substruct2;
	}
	 if (substruct3Length > 0)
	{
		struct
		{
			float substructValue[substruct3Length/4];
		}substruct3;
	}	

}VectorFieldParameterClip<bgcolor=0xe78607>;//Example: natives\NSW\vfx\editor\efd_em\efd_em004\efd_0004_em004_00_0009.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[305, 492, 647, 834, 1231, 2242, 2378, 7487, 7503]
	uint unkn1_0;//Values:[2048, 2176, 6144, 14336]
	uint unkn1_1;//Values:[2]
	uint unkn1_2;//Values:[2]
	uint unkn1_3;//Values:[2]
	uint unkn1_4;//Values:[0, 2]
	uint unkn1_5;//Values:[2]
	uint unkn1_6;//Values:[2]
	uint unkn1_7;//Values:[2]
	uint unkn1_8;//Values:[0, 2]
	uint unkn1_9;//Values:[2]
	uint unkn1_10;//Values:[0, 2]
	uint unkn1_11;//Values:[2]
	uint unkn1_12;//Values:[0, 4]
	uint unkn1_13;//Values:[0, 2, 4]
	uint unkn1_14;//Values:[0, 2, 4]
	uint unkn1_15;//Values:[0, 2]
	uint unkn1_16;//Values:[0, 2]
	uint unkn1_17;//Values:[0, 2]
	uint unkn1_18;//Values:[2]
	uint unkn1_19;//Values:[2]
	uint unkn1_20;//Values:[2]
	uint expressionLength;//Values:[28, 88, 96, 132, 160]
	ubyte expression[expressionLength];

}VectorFieldParameterExpression<bgcolor=0x7a5736>; //Example: natives\STM\vfx\editor\efd_em\efd_em086\efd_0004_em086_05_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[38, 50, 82, 94, 96, 110]

	float unkn1_0;//Values:[1.3089969158172607, 1.5707963705062866]
	float unkn1_1;//Values:[0.0, 0.1745329201221466, 0.3490658402442932]
	float unkn1_2;//Values:[-200.0, 0.5, 1.350000023841858, 10.0, 30.0]
	float unkn1_3;//Values:[0.0, 0.25, 2.0, 5.0]
	float unkn1_4;//Values:[1.0]
	uint null1_5;//Values:[0]
	uint null1_6;//Values:[0]
	uint null1_7;//Values:[0]
	float unkn1_8;//Values:[1.0]
	float unkn1_9;//Values:[1.0]
	uint null1_10;//Values:[0]
	float unkn1_11;//Values:[0.0, 0.009999999776482582, 0.014999999664723873, 0.029999999329447746]
	float unkn1_12;//Values:[0.0, 0.004999999888241291]

}Velocity2D<bgcolor=0x2a6866>;//Example: natives\NSW\vfx\editor\efd_evc\efd_evc0013\efd_0004_evc0013_00_0004.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(66);

}Velocity2DDelayFrame<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(68);

}Velocity2DExpression<bgcolor=0x2f158b>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[11, 12, 13, 14, 15, 17, 18, 19, 20, 21] + 2807 more
	uint unkn1;//Values:[0, 1, 2, 4]
	float unkn2_0;//Values:[-1.0, -0.9993147850036621, -0.9980973601341248, -0.9961947202682495, -0.9945219159126282, -0.9924038648605347, -0.9902680516242981, -0.9848077297210693, -0.9843780398368835, -0.9829629063606262] + 552 more
	float unkn2_1;//Values:[-0.9396926164627075, -0.7745190858840942, -0.6250000596046448, -0.5290063619613647, -0.5094095468521118, -0.5064293146133423, -0.5006157159805298, -0.5, -0.4914577007293701, -0.4803798794746399] + 307 more
	float unkn2_2;//Values:[-1.0, -0.9993147850036621, -0.9980973601341248, -0.9961947202682495, -0.9951339960098267, -0.9924038648605347, -0.9905012845993042, -0.9864997863769531, -0.9848077297210693, -0.9829629063606262] + 427 more
	float unkn2_3;//Values:[-0.7854211330413818, -0.6968861818313599, -0.6603201031684875, -0.6250000596046448, -0.5741109251976013, -0.5391490459442139, -0.5151650309562683, -0.48077163100242615, -0.4656253457069397, -0.4656252861022949] + 303 more
	float unkn2_4;//Values:[-1.0, -0.9980973601341248, -0.9961947202682495, -0.9924038648605347, -0.9876883625984192, -0.9870867133140564, -0.9848077297210693, -0.9829629063606262, -0.9829339981079102, -0.9815868735313416] + 594 more
	float unkn2_5;//Values:[-0.5554525852203369, -0.49984824657440186, -0.4665064215660095, -0.45112308859825134, -0.4239243268966675, -0.4104551374912262, -0.40753620862960815, -0.40641507506370544, -0.39951908588409424, -0.38860195875167847] + 340 more
	float unkn2_6;//Values:[-30.0, -10.0, -8.5, -5.0, -3.0, -2.0, -1.5, -1.0, -0.800000011920929, -0.699999988079071] + 188 more
	float unkn2_7;//Values:[0.0, 0.007000000216066837, 0.009999999776482582, 0.019999999552965164, 0.02500000037252903, 0.029999999329447746, 0.03999999910593033, 0.05000000074505806, 0.07000000029802322, 0.07500000298023224] + 63 more
	float unkn2_8;//Values:[0.0, 0.10000000149011612, 0.5, 0.550000011920929, 0.6000000238418579, 0.699999988079071, 0.75, 0.800000011920929, 0.824999988079071, 0.8500000238418579] + 56 more
	float unkn2_9;//Values:[0.0, 9.999999747378752e-05, 0.0005000000237487257, 0.0010000000474974513, 0.0020000000949949026, 0.003000000026077032, 0.004999999888241291, 0.008999999612569809, 0.009999999776482582, 0.012000000104308128] + 5 more
	float unkn2_10;//Values:[-30.0, -15.0, -10.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.5] + 58 more
	float unkn2_11;//Values:[-150.0, -80.0, -45.0, -40.0, -30.0, -25.0, -20.0, -15.0, -10.0, -8.0] + 103 more
	float unkn2_12;//Values:[-50.0, -30.0, -20.0, -15.0, -10.0, -8.0, -7.0, -6.0, -5.0, -4.0] + 71 more
	float unkn2_13;//Values:[0.0, 0.009999999776482582, 0.10000000149011612, 0.11999999731779099, 0.20000000298023224, 0.5, 0.699999988079071, 0.75, 0.800000011920929, 0.8999999761581421] + 58 more
	float unkn2_14;//Values:[0.0, 0.009999999776482582, 0.10000000149011612, 0.20000000298023224, 0.5, 0.699999988079071, 0.8500000238418579, 0.8999999761581421, 0.949999988079071, 1.0] + 35 more
	float unkn2_15;//Values:[0.0, 0.009999999776482582, 0.10000000149011612, 0.20000000298023224, 0.5, 0.699999988079071, 0.75, 0.800000011920929, 0.8999999761581421, 0.9300000071525574] + 48 more
	uint unkn3;//Values:[0, 1, 2]
	float unkn4_0;//Values:[-1.7999999523162842, -1.0, -0.9800000190734863, -0.8999999761581421, -0.800000011920929, -0.75, -0.699999988079071, -0.6000000238418579, -0.5600000023841858, -0.5] + 146 more
	float unkn4_1;//Values:[0.0, 0.00019999999494757503, 0.0005000000237487257, 0.0010000000474974513, 0.001500000013038516, 0.0020000000949949026, 0.0024999999441206455, 0.003000000026077032, 0.004999999888241291, 0.009999999776482582] + 25 more
	float unkn4_2;//Values:[-2.0, 0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 10.0, 15.0, 20.0]
	float unkn4_3;//Values:[0.0, 0.20000000298023224, 0.5, 1.0, 2.0, 10.0]
	float unkn4_4;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 0.5, 1.0, 4.0]
	float unkn4_5;//Values:[0.0, 0.10000000149011612, 0.20000000298023224, 1.0, 1.5, 2.0, 4.0, 5.0, 10.0]
}Velocity3D<bgcolor=0xfd1e6e>;//Example: natives\NSW\vfx\editor\efd_pl\efd_s-axe\efd_0004_s-axe_10_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[25, 106, 176, 184, 189, 202, 230, 240, 246, 249] + 42 more
	uint frameDelay;//Values:[0, 5, 10, 14, 15, 20, 30, 35, 40, 50] + 11 more
	uint unkn2;//Values:[0, 1, 10, 15]

}Velocity3DDelayFrame<bgcolor=0x08a9e5>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;//Values:[59, 83, 100, 139, 283, 294, 1256, 1685, 1702, 2283] + 8 more

	uint unkn1_0;//Values:[1, 2, 4]
	uint unkn1_1;//Values:[0, 2]
	float unkn1_2;//Values:[0.0, 15.0, 27.0]
	float unkn1_3;//Values:[0.0, 10.0]
	float unkn1_4;//Values:[0.0, 14.0]
	float unkn1_5;//Values:[0.0, 10.0]
	float unkn1_6;//Values:[0.0, 42.0, 60.0]
	float unkn1_7;//Values:[0.0, 10.0]
	uint unkn1_8;//Values:[1, 256, 3264]
	uint unkn1_9;//Values:[0, 1, 2, 4]
	uint unkn1_10;//Values:[2]
	uint unkn1_11;//Values:[2]
	uint unkn1_12;//Values:[2]
	uint unkn1_13;//Values:[2]
	uint unkn1_14;//Values:[2]
	uint unkn1_15;//Values:[2, 4]
	uint unkn1_16;//Values:[2, 4]
	uint unkn1_17;//Values:[2, 4]
	uint unkn1_18;//Values:[2]
	uint unkn1_19;//Values:[0, 2, 4]
	uint unkn1_20;//Values:[2, 4]
	uint expressionLength;//Values:[44, 52, 84, 112]
	ubyte expression[expressionLength];

}Velocity3DExpression<bgcolor=0x3a2006>;//Example: natives\NSW\vfx\editor\efd_ec\efd_ec030\efd_0004_ec030_00_0000.efx.2621987
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(185);

}VolumeField<bgcolor=0xf57685>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(110);

}VolumetricLighting<bgcolor=0x85aa32>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(166);

}WindInfluence3D<bgcolor=0x4081ec>;
typedef struct
{
	ItemTypeEnum itemType<bgcolor=0x00CC00>;
	uint unknSeqNum;

	//STRUCT UNMAPPED
	Printf("Unmapped Struct, template stopping.");
	writeErrorToFile(165);

}WindInfluence3DDelayFrame<bgcolor=0x5eac94>;
void GetEFXItemStruct(string itemType)
{
//EFX Item Type Enum Switch
	switch(itemType)
	{
		case "AlphaCorrection":
			{
				AlphaCorrection attribute;
			};break;
		case "AngularVelocity2D":
			{
				AngularVelocity2D attribute;
			};break;
		case "AngularVelocity2DDelayFrame":
			{
				AngularVelocity2DDelayFrame attribute;
			};break;
		case "AngularVelocity3D":
			{
				AngularVelocity3D attribute;
			};break;
		case "AngularVelocity3DDelayFrame":
			{
				AngularVelocity3DDelayFrame attribute;
			};break;
		case "Attractor":
			{
				Attractor attribute;
			};break;
		case "AttractorClip":
			{
				AttractorClip attribute;
			};break;
		case "AttractorExpression":
			{
				AttractorExpression attribute;
			};break;
		case "Blink":
			{
				Blink attribute;
			};break;
		case "ColorGrading":
			{
				ColorGrading attribute;
			};break;
		case "ContrastHighlighter":
			{
				ContrastHighlighter attribute;
			};break;
		case "CustomComputeShader":
			{
				CustomComputeShader attribute;
			};break;
		case "DepthOcclusion":
			{
				DepthOcclusion attribute;
			};break;
		case "DepthOperator":
			{
				DepthOperator attribute;
			};break;
		case "DirectionalField":
			{
				DirectionalField attribute;
			};break;
		case "DirectionalFieldParameter":
			{
				DirectionalFieldParameter attribute;
			};break;
		case "DirectionalFieldParameterClip":
			{
				DirectionalFieldParameterClip attribute;
			};break;
		case "DirectionalFieldParameterExpression":
			{
				DirectionalFieldParameterExpression attribute;
			};break;
		case "Distortion":
			{
				Distortion attribute;
			};break;
		case "DistortionExpression":
			{
				DistortionExpression attribute;
			};break;
		case "DrawOverlay":
			{
				DrawOverlay attribute;
			};break;
		case "EffectOptimizeShader":
			{
				EffectOptimizeShader attribute;
			};break;
		case "EmitMask":
			{
				EmitMask attribute;
			};break;
		case "EmitterColor":
			{
				EmitterColor attribute;
			};break;
		case "EmitterColorClip":
			{
				EmitterColorClip attribute;
			};break;
		case "EmitterHSV":
			{
				EmitterHSV attribute;
			};break;
		case "EmitterHSVExpression":
			{
				EmitterHSVExpression attribute;
			};break;
		case "EmitterPriority":
			{
				EmitterPriority attribute;
			};break;
		case "EmitterShape2D":
			{
				EmitterShape2D attribute;
			};break;
		case "EmitterShape2DExpression":
			{
				EmitterShape2DExpression attribute;
			};break;
		case "EmitterShape3D":
			{
				EmitterShape3D attribute;
			};break;
		case "EmitterShape3DExpression":
			{
				EmitterShape3DExpression attribute;
			};break;
		case "FadeByAngle":
			{
				FadeByAngle attribute;
			};break;
		case "FadeByAngleExpression":
			{
				FadeByAngleExpression attribute;
			};break;
		case "FadeByDepth":
			{
				FadeByDepth attribute;
			};break;
		case "FadeByDepthExpression":
			{
				FadeByDepthExpression attribute;
			};break;
		case "FadeByEmitterAngle":
			{
				FadeByEmitterAngle attribute;
			};break;
		case "FadeByOcclusion":
			{
				FadeByOcclusion attribute;
			};break;
		case "FadeByOcclusionExpression":
			{
				FadeByOcclusionExpression attribute;
			};break;
		case "FakeDoF":
			{
				FakeDoF attribute;
			};break;
		case "FixRandomGenerator":
			{
				FixRandomGenerator attribute;
			};break;
		case "FlowMap":
			{
				FlowMap attribute;
			};break;
		case "FluidEmitter2D":
			{
				FluidEmitter2D attribute;
			};break;
		case "FluidSimulator2D":
			{
				FluidSimulator2D attribute;
			};break;
		case "GlobalVectorField":
			{
				GlobalVectorField attribute;
			};break;
		case "GlobalVectorFieldClip":
			{
				GlobalVectorFieldClip attribute;
			};break;
		case "GlobalVectorFieldExpression":
			{
				GlobalVectorFieldExpression attribute;
			};break;
		case "IgnorePlayerColor":
			{
				IgnorePlayerColor attribute;
			};break;
		case "ItemNum":
			{
				ItemNum attribute;
			};break;
		case "Life":
			{
				Life attribute;
			};break;
		case "LifeExpression":
			{
				LifeExpression attribute;
			};break;
		case "LuminanceBleed":
			{
				LuminanceBleed attribute;
			};break;
		case "MeshEmitter":
			{
				MeshEmitter attribute;
			};break;
		case "MeshEmitterClip":
			{
				MeshEmitterClip attribute;
			};break;
		case "MeshEmitterExpression":
			{
				MeshEmitterExpression attribute;
			};break;
		case "Noise":
			{
				Noise attribute;
			};break;
		case "ParentOptions":
			{
				ParentOptions attribute;
			};break;
		case "PlaneCollider":
			{
				PlaneCollider attribute;
			};break;
		case "PlaneColliderExpression":
			{
				PlaneColliderExpression attribute;
			};break;
		case "PlayEfx":
			{
				PlayEfx attribute;
			};break;
		case "PlayEmitter":
			{
				PlayEmitter attribute;
			};break;
		case "ProceduralDistortion":
			{
				ProceduralDistortion attribute;
			};break;
		case "ProceduralDistortionClip":
			{
				ProceduralDistortionClip attribute;
			};break;
		case "ProceduralDistortionDelayFrame":
			{
				ProceduralDistortionDelayFrame attribute;
			};break;
		case "ProceduralDistortionExpression":
			{
				ProceduralDistortionExpression attribute;
			};break;
		case "PtAngularVelocity2D":
			{
				PtAngularVelocity2D attribute;
			};break;
		case "PtAngularVelocity2DExpression":
			{
				PtAngularVelocity2DExpression attribute;
			};break;
		case "PtAngularVelocity3D":
			{
				PtAngularVelocity3D attribute;
			};break;
		case "PtAngularVelocity3DExpression":
			{
				PtAngularVelocity3DExpression attribute;
			};break;
		case "PtBehavior":
			{
				PtBehavior attribute;
			};break;
		case "PtBehaviorClip":
			{
				PtBehaviorClip attribute;
			};break;
		case "PtColliderAction":
			{
				PtColliderAction attribute;
			};break;
		case "PtCollision":
			{
				PtCollision attribute;
			};break;
		case "PtColor":
			{
				PtColor attribute;
			};break;
		case "PtColorClip":
			{
				PtColorClip attribute;
			};break;
		case "PtLife":
			{
				PtLife attribute;
			};break;
		case "PtSort":
			{
				PtSort attribute;
			};break;
		case "PtTransform2D":
			{
				PtTransform2D attribute;
			};break;
		case "PtTransform2DClip":
			{
				PtTransform2DClip attribute;
			};break;
		case "PtTransform3D":
			{
				PtTransform3D attribute;
			};break;
		case "PtTransform3DClip":
			{
				PtTransform3DClip attribute;
			};break;
		case "PtUvSequence":
			{
				PtUvSequence attribute;
			};break;
		case "PtUvSequenceClip":
			{
				PtUvSequenceClip attribute;
			};break;
		case "PtVelocity2D":
			{
				PtVelocity2D attribute;
			};break;
		case "PtVelocity2DClip":
			{
				PtVelocity2DClip attribute;
			};break;
		case "PtVelocity3D":
			{
				PtVelocity3D attribute;
			};break;
		case "PtVelocity3DClip":
			{
				PtVelocity3DClip attribute;
			};break;
		case "RenderTarget":
			{
				RenderTarget attribute;
			};break;
		case "RgbCommon":
			{
				RgbCommon attribute;
			};break;
		case "RgbWater":
			{
				RgbWater attribute;
			};break;
		case "RotateAnim":
			{
				RotateAnim attribute;
			};break;
		case "RotateAnimDelayFrame":
			{
				RotateAnimDelayFrame attribute;
			};break;
		case "RotateAnimExpression":
			{
				RotateAnimExpression attribute;
			};break;
		case "ScaleAnim":
			{
				ScaleAnim attribute;
			};break;
		case "ScaleAnimDelayFrame":
			{
				ScaleAnimDelayFrame attribute;
			};break;
		case "ScaleAnimExpression":
			{
				ScaleAnimExpression attribute;
			};break;
		case "ScaleByDepth":
			{
				ScaleByDepth attribute;
			};break;
		case "ScreenSpaceEmitter":
			{
				ScreenSpaceEmitter attribute;
			};break;
		case "ShaderSettings":
			{
				ShaderSettings attribute;
			};break;
		case "ShaderSettingsExpression":
			{
				ShaderSettingsExpression attribute;
			};break;
		case "ShapeOperator":
			{
				ShapeOperator attribute;
			};break;
		case "ShapeOperatorExpression":
			{
				ShapeOperatorExpression attribute;
			};break;
		case "Spawn":
			{
				Spawn attribute;
			};break;
		case "SpawnExpression":
			{
				SpawnExpression attribute;
			};break;
		case "StretchBlur":
			{
				StretchBlur attribute;
			};break;
		case "StretchBlurExpression":
			{
				StretchBlurExpression attribute;
			};break;
		case "TestBehaviorUpdater":
			{
				TestBehaviorUpdater attribute;
			};break;
		case "TexelChannelOperator":
			{
				TexelChannelOperator attribute;
			};break;
		case "TexelChannelOperatorClip":
			{
				TexelChannelOperatorClip attribute;
			};break;
		case "TexelChannelOperatorExpression":
			{
				TexelChannelOperatorExpression attribute;
			};break;
		case "TextureFilter":
			{
				TextureFilter attribute;
			};break;
		case "TextureUnit":
			{
				TextureUnit attribute;
			};break;
		case "TextureUnitExpression":
			{
				TextureUnitExpression attribute;
			};break;
		case "Transform2D":
			{
				Transform2D attribute;
			};break;
		case "Transform2DClip":
			{
				Transform2DClip attribute;
			};break;
		case "Transform2DExpression":
			{
				Transform2DExpression attribute;
			};break;
		case "Transform2DModifier":
			{
				Transform2DModifier attribute;
			};break;
		case "Transform2DModifierDelayFrame":
			{
				Transform2DModifierDelayFrame attribute;
			};break;
		case "Transform3D":
			{
				Transform3D attribute;
			};break;
		case "Transform3DClip":
			{
				Transform3DClip attribute;
			};break;
		case "Transform3DExpression":
			{
				Transform3DExpression attribute;
			};break;
		case "Transform3DModifier":
			{
				Transform3DModifier attribute;
			};break;
		case "Transform3DModifierDelayFrame":
			{
				Transform3DModifierDelayFrame attribute;
			};break;
		case "TypeBillboard2D":
			{
				TypeBillboard2D attribute;
			};break;
		case "TypeBillboard2DExpression":
			{
				TypeBillboard2DExpression attribute;
			};break;
		case "TypeBillboard3D":
			{
				TypeBillboard3D attribute;
			};break;
		case "TypeBillboard3DExpression":
			{
				TypeBillboard3DExpression attribute;
			};break;
		case "TypeBillboard3DMaterial":
			{
				TypeBillboard3DMaterial attribute;
			};break;
		case "TypeBillboard3DMaterialClip":
			{
				TypeBillboard3DMaterialClip attribute;
			};break;
		case "TypeBillboard3DMaterialExpression":
			{
				TypeBillboard3DMaterialExpression attribute;
			};break;
		case "TypeGpuBillboard":
			{
				TypeGpuBillboard attribute;
			};break;
		case "TypeGpuBillboardExpression":
			{
				TypeGpuBillboardExpression attribute;
			};break;
		case "TypeGpuLightning3D":
			{
				TypeGpuLightning3D attribute;
			};break;
		case "TypeGpuMesh":
			{
				TypeGpuMesh attribute;
			};break;
		case "TypeGpuMeshExpression":
			{
				TypeGpuMeshExpression attribute;
			};break;
		case "TypeGpuMeshTrail":
			{
				TypeGpuMeshTrail attribute;
			};break;
		case "TypeGpuMeshTrailClip":
			{
				TypeGpuMeshTrailClip attribute;
			};break;
		case "TypeGpuMeshTrailExpression":
			{
				TypeGpuMeshTrailExpression attribute;
			};break;
		case "TypeGpuPolygon":
			{
				TypeGpuPolygon attribute;
			};break;
		case "TypeGpuRibbonFollow":
			{
				TypeGpuRibbonFollow attribute;
			};break;
		case "TypeGpuRibbonLength":
			{
				TypeGpuRibbonLength attribute;
			};break;
		case "TypeLightning3D":
			{
				TypeLightning3D attribute;
			};break;
		case "TypeLightning3DExpression":
			{
				TypeLightning3DExpression attribute;
			};break;
		case "TypeLightning3DMaterial":
			{
				TypeLightning3DMaterial attribute;
			};break;
		case "TypeMesh":
			{
				TypeMesh attribute;
			};break;
		case "TypeMeshClip":
			{
				TypeMeshClip attribute;
			};break;
		case "TypeMeshExpression":
			{
				TypeMeshExpression attribute;
			};break;
		case "TypeModularBillboard":
			{
				TypeModularBillboard attribute;
			};break;
		case "TypeNoDraw":
			{
				TypeNoDraw attribute;
			};break;
		case "TypeNoDrawExpression":
			{
				TypeNoDrawExpression attribute;
			};break;
		case "TypeNodeBillboard":
			{
				TypeNodeBillboard attribute;
			};break;
		case "TypeNodeBillboardExpression":
			{
				TypeNodeBillboardExpression attribute;
			};break;
		case "TypePolygon":
			{
				TypePolygon attribute;
			};break;
		case "TypePolygonClip":
			{
				TypePolygonClip attribute;
			};break;
		case "TypePolygonExpression":
			{
				TypePolygonExpression attribute;
			};break;
		case "TypePolygonMaterial":
			{
				TypePolygonMaterial attribute;
			};break;
		case "TypePolygonTrail":
			{
				TypePolygonTrail attribute;
			};break;
		case "TypePolygonTrailMaterial":
			{
				TypePolygonTrailMaterial attribute;
			};break;
		case "TypeRibbonChain":
			{
				TypeRibbonChain attribute;
			};break;
		case "TypeRibbonChainExpression":
			{
				TypeRibbonChainExpression attribute;
			};break;
		case "TypeRibbonChainMaterial":
			{
				TypeRibbonChainMaterial attribute;
			};break;
		case "TypeRibbonChainMaterialClip":
			{
				TypeRibbonChainMaterialClip attribute;
			};break;
		case "TypeRibbonChainMaterialExpression":
			{
				TypeRibbonChainMaterialExpression attribute;
			};break;
		case "TypeRibbonFixEnd":
			{
				TypeRibbonFixEnd attribute;
			};break;
		case "TypeRibbonFixEndExpression":
			{
				TypeRibbonFixEndExpression attribute;
			};break;
		case "TypeRibbonFixEndMaterial":
			{
				TypeRibbonFixEndMaterial attribute;
			};break;
		case "TypeRibbonFixEndMaterialClip":
			{
				TypeRibbonFixEndMaterialClip attribute;
			};break;
		case "TypeRibbonFixEndMaterialExpression":
			{
				TypeRibbonFixEndMaterialExpression attribute;
			};break;
		case "TypeRibbonFollow":
			{
				TypeRibbonFollow attribute;
			};break;
		case "TypeRibbonFollowExpression":
			{
				TypeRibbonFollowExpression attribute;
			};break;
		case "TypeRibbonFollowMaterial":
			{
				TypeRibbonFollowMaterial attribute;
			};break;
		case "TypeRibbonFollowMaterialClip":
			{
				TypeRibbonFollowMaterialClip attribute;
			};break;
		case "TypeRibbonFollowMaterialExpression":
			{
				TypeRibbonFollowMaterialExpression attribute;
			};break;
		case "TypeRibbonLength":
			{
				TypeRibbonLength attribute;
			};break;
		case "TypeRibbonLengthExpression":
			{
				TypeRibbonLengthExpression attribute;
			};break;
		case "TypeRibbonLengthMaterial":
			{
				TypeRibbonLengthMaterial attribute;
			};break;
		case "TypeRibbonLengthMaterialClip":
			{
				TypeRibbonLengthMaterialClip attribute;
			};break;
		case "TypeRibbonLengthMaterialExpression":
			{
				TypeRibbonLengthMaterialExpression attribute;
			};break;
		case "TypeRibbonLightweight":
			{
				TypeRibbonLightweight attribute;
			};break;
		case "TypeRibbonLightweightMaterial":
			{
				TypeRibbonLightweightMaterial attribute;
			};break;
		case "TypeRibbonLightweightMaterialClip":
			{
				TypeRibbonLightweightMaterialClip attribute;
			};break;
		case "TypeRibbonLightweightMaterialExpression":
			{
				TypeRibbonLightweightMaterialExpression attribute;
			};break;
		case "TypeRibbonParticle":
			{
				TypeRibbonParticle attribute;
			};break;
		case "TypeRibbonTrail":
			{
				TypeRibbonTrail attribute;
			};break;
		case "TypeStrainRibbon":
			{
				TypeStrainRibbon attribute;
			};break;
		case "TypeStrainRibbonExpression":
			{
				TypeStrainRibbonExpression attribute;
			};break;
		case "TypeStrainRibbonMaterial":
			{
				TypeStrainRibbonMaterial attribute;
			};break;
		case "TypeStrainRibbonMaterialClip":
			{
				TypeStrainRibbonMaterialClip attribute;
			};break;
		case "TypeStrainRibbonMaterialExpression":
			{
				TypeStrainRibbonMaterialExpression attribute;
			};break;
		case "UVScroll":
			{
				UVScroll attribute;
			};break;
		case "UVSequence":
			{
				UVSequence attribute;
			};break;
		case "UVSequenceExpression":
			{
				UVSequenceExpression attribute;
			};break;
		case "UVSequenceModifier":
			{
				UVSequenceModifier attribute;
			};break;
		case "UnitCulling":
			{
				UnitCulling attribute;
			};break;
		case "VanishArea3D":
			{
				VanishArea3D attribute;
			};break;
		case "VanishArea3DExpression":
			{
				VanishArea3DExpression attribute;
			};break;
		case "VectorField":
			{
				VectorField attribute;
			};break;
		case "VectorFieldParameter":
			{
				VectorFieldParameter attribute;
			};break;
		case "VectorFieldParameterClip":
			{
				VectorFieldParameterClip attribute;
			};break;
		case "VectorFieldParameterExpression":
			{
				VectorFieldParameterExpression attribute;
			};break;
		case "Velocity2D":
			{
				Velocity2D attribute;
			};break;
		case "Velocity2DDelayFrame":
			{
				Velocity2DDelayFrame attribute;
			};break;
		case "Velocity2DExpression":
			{
				Velocity2DExpression attribute;
			};break;
		case "Velocity3D":
			{
				Velocity3D attribute;
			};break;
		case "Velocity3DDelayFrame":
			{
				Velocity3DDelayFrame attribute;
			};break;
		case "Velocity3DExpression":
			{
				Velocity3DExpression attribute;
			};break;
		case "VolumeField":
			{
				VolumeField attribute;
			};break;
		case "VolumetricLighting":
			{
				VolumetricLighting attribute;
			};break;
		case "WindInfluence3D":
			{
				WindInfluence3D attribute;
			};break;
		case "WindInfluence3DDelayFrame":
			{
				WindInfluence3DDelayFrame attribute;
			};break;
		default:
			{
				local uint errorItemType = ReadUInt();
				local uint errorUnknSeqNum = ReadUInt(FTell()+4);
				Printf("Struct ID does not match any known structs, template stopping.\nItem Type:%i\nunknSeqNum:%i\n",errorItemType,errorUnknSeqNum);
				writeErrorToFile(999);
			};
	}
}
//END EFX ITEM SWITCH


//DISPLAY
Printf("MH Rise Pre Sunbreak EFX Template V%i\nhttps://github.com/NSACloud/MHR-EFX-Template\n\nSet the character set to UTF-8 in View > Character Set.\n\n",TEMPLATEVERSION);
EFXR main_efxr;
Printf("Template finished executing.");